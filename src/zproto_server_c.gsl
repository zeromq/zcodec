.template 0
#   zproto_class_c.gsl
#
#   Generates a server class for a protocol specification
#   This manages ROUTER server talking to DEALER clients
#
include "zproto_lib.gsl"
resolve_includes ()
set_defaults ()

#   Prepare state machine stuff
if defined (switches.animate)
    switches.animate = switches.animate
endif

#   Load message structures for this engine
global.proto = xml.load_file (class.proto + ".xml")

#   API methods that get passed to server task
for class.method
   if return ?= "number"
       method.ctype = "long"
   elsif return ?= "string"
       method.ctype = "char *"
   else
       method.ctype = "void"
   endif
   method.args = ""
   for argument
       if type = "string"
           method.args += ", const char *$(name:c)"
       elsif type = "number"
           method.args += ", long $(name:c)"
       else
           echo "E: we didn't add support for $(type)s in methods"
       endif
   endfor
endfor

#   Inherit defaults state, if any, to all other states
for class.state as defaults where name = "defaults"
    for event
        for class.state where count (event, name = -2.name) = 0
            copy event to state
        endfor
    endfor
    delete defaults
endfor

#  Collect all events and actions at class level
for class.state
    state.comma = last()?? ""? ","
    for event
        #   Flag state as external if it has protocol events
        if count (proto.message, message.name = event.name)
            event.external = 1
            state.external = 1
        endif
        #   Copy event to class if not yet defined there
        if count (class.event, name = -1.name) = 0
            copy event to class
        endif
        for action where count (class.action, name = -1.name) = 0
            copy action to class
        endfor
    endfor
endfor

#   Collect prototypes that we need
for class.method
    new class.prototype
        prototype.name = "$(method.name:c)_method"
        prototype.ctype = method.ctype
        prototype.exists = 0
        prototype.args = "server_t *self" + method.args
    endnew
endfor
for class.action
    if name <> "send" \
    &  name <> "terminate"
        new class.prototype
            prototype.name = "$(action.name:c)"
            prototype.ctype = "void"
            prototype.exists = 0
            prototype.args = "client_t *self"
        endnew
    endif
endfor

.endtemplate
.output "$(class.header)/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************

    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  @interface
//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (void);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Load server configuration data
void
    $(class.name)_configure ($(class.name)_t *self, const char *config_file);

//  Set one configuration path value
void
    $(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value);

//  Binds the server to an endpoint, formatted as printf string
long
    $(class.name)_bind ($(class.name)_t *self, const char *format, ...);

.for class.method
//  $(string.trim (method.):left)
$(ctype)
    $(class.name)_$(name:c) ($(class.name)_t *self$(args));

.endfor
//  Self test of this class
void
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.output "$(class.source)/$(class.name)_engine.h"
/*  =========================================================================
    $(class.name)_engine - $(class.title:) engine

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************

    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

//  The server runs as a background thread so that we can run multiple
//  classs at once. The API talks to the server thread over an inproc
//  pipe.

static void
s_server_task (void *args, zctx_t *ctx, void *pipe);

//  ---------------------------------------------------------------------
//  Structure of the front-end API class for $(class.name)

struct _$(class.name)_t {
    zctx_t *ctx;        //  CZMQ context
    void *pipe;         //  Pipe through to server
};


//  --------------------------------------------------------------------------
//  Create a new $(class.name) and a new server instance

$(class.name)_t *
$(class.name)_new (void)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    assert (self);

    //  Start a background thread for each server instance
    self->ctx = zctx_new ();
    self->pipe = zthread_fork (self->ctx, s_server_task, NULL);
    if (self->pipe) {
        char *status = zstr_recv (self->pipe);
        if (strneq (status, "OK"))
            $(class.name)_destroy (&self);
        zstr_free (&status);
    }
    else {
        free (self);
        self = NULL;
    }
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name) and stop the server

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;
        zstr_send (self->pipe, "TERMINATE");
        char *string = zstr_recv (self->pipe);
        free (string);
        zctx_destroy (&self->ctx);
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Load server configuration data
void
$(class.name)_configure ($(class.name)_t *self, const char *config_file)
{
    zstr_sendm (self->pipe, "CONFIGURE");
    zstr_send (self->pipe, config_file);
}


//  --------------------------------------------------------------------------
//  Set one configuration key value

void
$(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value)
{
    zstr_sendm (self->pipe, "SET_OPTION");
    zstr_sendm (self->pipe, path);
    zstr_send  (self->pipe, value);
}


//  --------------------------------------------------------------------------
//  Binds the server to an endpoint, formatted as printf string

long
$(class.name)_bind ($(class.name)_t *self, const char *format, ...)
{
    assert (self);
    assert (format);
    
    //  Format endpoint from provided arguments
    va_list argptr;
    va_start (argptr, format);
    char *endpoint = zsys_vprintf (format, argptr);
    va_end (argptr);

    //  Send BIND command to server task
    zstr_sendm (self->pipe, "BIND");
    zstr_sendf (self->pipe, endpoint);
    char *reply = zstr_recv (self->pipe);
    long reply_value = atol (reply);
    free (reply);
    free (endpoint);
    return reply_value;
}
.for class.method


//  --------------------------------------------------------------------------
//  $(string.trim (method.):left)

$(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self\
.   method.send = "send"
.   for argument
.       method.send = "sendm"
.       if last ()
.           argument.send = "sendf"
.       else
.           argument.send = "sendfm"
.       endif
.       if type = "string"
, const char *$(name)\
.       elsif type = "number"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
)
{
    assert (self);
.   for argument where type = "string"
    assert ($(name));
.   endfor
    zstr_$(send) (self->pipe, "$(NAME)");
.   for argument
.       if type = "string"
    zstr_$(send) (self->pipe, $(name));
.       elsif type = "number"
    zstr_$(send) (self->pipe, "%ld", $(name));
.       endif
.   endfor
.   if defined (method.return)
    char *reply = zstr_recv (self->pipe);
.       if return = "string"
    return reply;
.       else
    long reply_value = atol (reply);
    free (reply);
    return reply_value;
.       endif
.   endif
}
.endfor


//  ---------------------------------------------------------------------
//  State machine constants

typedef enum {
.for class.state
.   state.comma = last()?? ""? ","
    $(name:c)_state = $(index ())$(comma)
.endfor
} state_t;

typedef enum {
    terminate_event = -1,
.for class.event
.   event.comma = last()?? ""? ","
    $(name:c)_event = $(index ())$(comma)
.endfor
} event_t;

.if switches.animate ?= 1
//  Names for animation
static char *
s_state_name [] = {
    "",
.for class.state
    "$(Name)"$(comma)
.endfor
};

static char *
s_event_name [] = {
    "",
.for class.event
.   if defined (event.external)
    "$(NAME)"$(comma)
.   else
    "$(name:)"$(comma)
.   endif
.endfor
};
 
.endif

//  ---------------------------------------------------------------------
//  Context for the server task. This embeds the application-level
//  server context at its start, so that a pointer to server_t can
//  be cast to s_server_t for our internal use.

typedef struct {
    server_t server;            //  Application-level server context
    zctx_t *ctx;                //  Each thread has its own CZMQ context
    void *pipe;                 //  Socket to back to caller API
    void *router;               //  Socket to talk to clients
    int port;                   //  Server port bound to
    zhash_t *clients;           //  Clients we're connected to
    zconfig_t *config;          //  Configuration tree
    uint client_id;             //  Client ID counter
    size_t timeout;             //  Default client expiry timeout
    size_t monitor;             //  Server monitor interval in msec
    int64_t monitor_at;         //  Next monitor at this time
    bool terminated;            //  Server is shutting down
} s_server_t;


//  ---------------------------------------------------------------------
//  Context for each connected client. This embeds the application-level
//  client context at its start, so that a pointer to client_t can
//  be cast to s_client_t for our internal use.

typedef struct {
    client_t client;            //  Application-level client context
    char *hashkey;              //  Key into server->clients hash
    zframe_t *routing_id;       //  Routing_id back to client
    uint client_id;             //  Client ID value
    state_t state;              //  Current state
    event_t event;              //  Current event
    event_t next_event;         //  The next event
    event_t exception;          //  Exception event, if any
    bool external_state;        //  Is client in external state?
    zlist_t *requests;          //  Else, requests are queued here
    int64_t wakeup_at;          //  Wake up at this time
    event_t wakeup_event;       //  Wake up with this event
    int64_t expires_at;         //  Expires at this time
    size_t timeout;             //  Actual connection timeout
} s_client_t;

static void
    s_server_client_execute (s_server_t *server, s_client_t *client, int event);
.for class.prototype
static $(ctype)
    $(name) ($(args));
.endfor

//  ---------------------------------------------------------------------
//  These methods are an internal API for actions

//  Set the next event, needed in at least one action in an internal
//  state; otherwise the state machine will wait for a message on the
//  router socket and treat that as the event.

static void
set_next_event (client_t *self, event_t event)
{
    if (self)
        ((s_client_t *) self)->next_event = event;
}

//  Raise an exception with 'event', halting any actions in progress.
//  Continues execution of actions defined for the exception event.

static void
raise_exception (client_t *self, event_t event)
{
    if (self)
        ((s_client_t *) self)->exception = (event);
}

//  Set wakeup alarm after 'delay' msecs. The next state should
//  handle the wakeup event. The alarm is cancelled on any other
//  event.

static void
set_wakeup_event (client_t *self, size_t delay, event_t event)
{
    if (self) {
        ((s_client_t *) self)->wakeup_at = zclock_time () + (delay);
        ((s_client_t *) self)->wakeup_event = (event);
    }
}

//  Execute 'event' on specified client. Use this to send events to
//  other clients. Cancels any wakeup alarm on that client.

static void
send_event (client_t *self, event_t event)
{
    if (self) {
        ((s_client_t *) self)->wakeup_at = 0;
        s_server_client_execute ((s_server_t *) self->server,
                                 (s_client_t *) self, event);
    }
}


//  Pedantic compilers don't like unused functions
static void
s_satisfy_pedantic_compilers (void)
{
    set_next_event (NULL, 0);
    raise_exception (NULL, 0);
    set_wakeup_event (NULL, 0, 0);
    send_event (NULL, 0);
}


//  ---------------------------------------------------------------------
//  Client methods

static s_client_t *
s_client_new (s_server_t *server, zframe_t *routing_id)
{
    s_client_t *self = (s_client_t *) zmalloc (sizeof (s_client_t));
    assert (self);
    assert ((s_client_t *) &self->client == self);
    
.for class.state where item () = 1
    self->state = $(name:c)_state;
    self->external_state = $(external);
.endfor
    self->hashkey = zframe_strhex (routing_id);
    self->routing_id = zframe_dup (routing_id);
    self->requests = zlist_new ();
    self->client_id = ++(server->client_id);
    
    self->client.server = (server_t *) server;
    self->client.reply = $(proto)_new (0);
    $(proto)_set_routing_id (self->client.reply, self->routing_id);
    client_initialize (&self->client);

    return self;
}

static void
s_client_destroy (s_client_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        s_client_t *self = *self_p;
        $(proto)_destroy (&self->client.request);
        $(proto)_destroy (&self->client.reply);

        //  Clear out pending requests, if any
        $(proto)_t *request = ($(proto)_t *) zlist_first (self->requests);
        while (request) {
            $(proto)_destroy (&request);
            request = ($(proto)_t *) zlist_next (self->requests);
        }
        zlist_destroy (&self->requests);
        zframe_destroy (&self->routing_id);
        client_terminate (&self->client);
        free (self->hashkey);
        free (self);
        *self_p = NULL;
    }
}

//  Callback when we remove client from 'clients' hash table
static void
s_client_free (void *argument)
{
    s_client_t *client = (s_client_t *) argument;
    s_client_destroy (&client);
}

//  Client hash function that calculates tickless timer
static int
s_client_tickless (const char *key, void *client, void *argument)
{
    s_client_t *self = (s_client_t *) client;
    uint64_t *tickless = (uint64_t *) argument;
    if (self->expires_at
    &&  *tickless > self->expires_at)
        *tickless = self->expires_at;
    if (self->wakeup_at
    &&  *tickless > self->wakeup_at)
        *tickless = self->wakeup_at;
    return 0;
}

//  Client hash function to execute timers, if any.
//  This method might be replaced with a sorted list of timers;
//  to be tested & tuned with 10K clients; could be a utility
//  class in CZMQ

static int
s_client_timer (const char *key, void *client, void *argument)
{
    s_client_t *self = (s_client_t *) client;
    
    //  Expire client after timeout seconds of silence
    if (self->expires_at
    &&  self->expires_at <= zclock_time ()) {
.   if count (class.event, name = "expired")
        s_server_client_execute ((s_server_t *) argument, self, expired_event);
.   endif
        //  In case dialog doesn't handle expiry by destroying 
        //  client, cancel all timers to prevent busy-looping
        self->expires_at = 0;
        self->wakeup_at = 0;
    }
    else
    if (self->wakeup_at
    &&  self->wakeup_at <= zclock_time ()) {
        s_server_client_execute ((s_server_t *) argument, self, self->wakeup_event);
        self->wakeup_at = 0;    //  Cancel wakeup timer
    }
    return 0;
}

//  Accept request, return corresponding event

static event_t
s_client_accept (s_client_t *client, $(proto)_t *request)
{
    $(proto)_destroy (&client->client.request);
    client->client.request = request;
    switch ($(proto)_id (request)) {
.   for proto.message where count (class.event, event.name = message.name) = 1
        case $(PROTO)_$(NAME:C):
            return $(name:c)_event;
            break;
.   endfor
    }
    //  If we had invalid $(proto)_t, terminate the client
    return terminate_event;
}


//  Server methods

static void
s_server_config_self (s_server_t *self)
{
    //  Get standard server configuration
    //  Default client timeout is 60 seconds, if state machine defines
    //  an expired event; otherwise there is no timeout.
    self->timeout = atoi (
        zconfig_resolve (self->config, "server/timeout", "60")) * 1000;
    self->monitor = atoi (
        zconfig_resolve (self->config, "server/monitor", "1")) * 1000;
    self->monitor_at = zclock_time () + self->monitor;
}

static s_server_t *
s_server_new (zctx_t *ctx, void *pipe)
{
    s_server_t *self = (s_server_t *) zmalloc (sizeof (s_server_t));
    assert (self);
    assert ((s_server_t *) &self->server == self);
    server_initialize (&self->server);
    
    self->ctx = ctx;
    self->pipe = pipe;
    self->router = zsocket_new (self->ctx, ZMQ_ROUTER);
    self->clients = zhash_new ();
    self->config = zconfig_new ("root", NULL);
    s_server_config_self (self);

    s_satisfy_pedantic_compilers ();
    return self;
}

static void
s_server_destroy (s_server_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        s_server_t *self = *self_p;
        server_terminate (&self->server);
        zsocket_destroy (self->ctx, self->router);
        zconfig_destroy (&self->config);
        zhash_destroy (&self->clients);
        free (self);
        *self_p = NULL;
    }
}

//  Apply configuration tree:
//   * apply server configuration
//   * print any echo items in top-level sections
//   * apply sections that match methods

static void
s_server_apply_config (s_server_t *self)
{
    //  Apply echo commands and class methods
    zconfig_t *section = zconfig_child (self->config);
    while (section) {
        zconfig_t *entry = zconfig_child (section);
        while (entry) {
            if (streq (zconfig_name (entry), "echo"))
                zclock_log (zconfig_value (entry));
            entry = zconfig_next (entry);
        }
        if (streq (zconfig_name (section), "bind")) {
            char *endpoint = zconfig_resolve (section, "endpoint", "?");
            self->port = zsocket_bind (self->router, endpoint);
        }
.for class.method where count (argument) > 0
        if (streq (zconfig_name (section), "$(name:c)")) {
.   for argument
.       if type = "string"
            char *$(name) = zconfig_resolve (section, "$(name)", "?");
.       elsif type = "number"
            long $(name) = atoi (zconfig_resolve (section, "$(name)", ""));
.       endif
.   endfor
            $(name:c)_method (&self->server\
.   for argument
, $(name)\
.   endfor
);
        }
.   if !last ()
        else
.   endif
.endfor
        section = zconfig_next (section);
    }
    s_server_config_self (self);
}

//  Process message from pipe
static void
s_server_control_message (s_server_t *self)
{
    zmsg_t *msg = zmsg_recv (self->pipe);
.if switches.trace ?= 1
    zclock_log ("API command:");
    zmsg_dump (msg);
.endif
.for class.method
    if (streq (method, "$(NAME)")) {
.   for argument
.       if type = "string"
        char *$(name) = zmsg_popstr (msg);
.       elsif type = "number"
        char *$(name)_string = zmsg_popstr (msg);
        long $(name) = atoi ($(name)_string);
        free ($(name)_string);
.       endif
.   endfor
.   if return ?= "number"
        long reply_value = $(name:c)_method (&self->server\
.   elsif return ?= "string"
        char *reply = $(name:c)_method (&self->server\
.   else
        $(name:c)_method (&self->server\
.   endif
.   for argument
, $(name)\
.   endfor
);
.   if return ?= "number"
        zstr_sendf (self->pipe, "%ld", reply_value);
.   elsif return ?= "string"
        zstr_send (self->pipe, reply);
        free (reply);
.   endif
.   for argument where type = "string"
        free ($(name));
.   endfor
    }
    else
.endfor
    char *method = zmsg_popstr (msg);
    if (streq (method, "BIND")) {
        char *endpoint = zmsg_popstr (msg);
        self->port = zsocket_bind (self->router, endpoint);
        zstr_sendf (self->pipe, "%d", self->port);
        free (endpoint);
    }
    else
    if (streq (method, "CONFIGURE")) {
        char *config_file = zmsg_popstr (msg);
        zconfig_destroy (&self->config);
        self->config = zconfig_load (config_file);
        if (self->config)
            s_server_apply_config (self);
        else {
            printf ("E: cannot load config file '%s'\\n", config_file);
            self->config = zconfig_new ("root", NULL);
        }
        free (config_file);
    }
    else
    if (streq (method, "SET_OPTION")) {
        char *path = zmsg_popstr (msg);
        char *value = zmsg_popstr (msg);
        zconfig_put (self->config, path, value);
        s_server_config_self (self);
        free (path);
        free (value);
    }
    else
    if (streq (method, "TERMINATE")) {
        zstr_send (self->pipe, "OK");
        self->terminated = true;
    }
    free (method);
    zmsg_destroy (&msg);
}

.macro output_event_body
.   for action
                    if (!client->exception) {
.       if name = "send"
                        //  send $(message:c)
.           if switches.animate ?= 1
                        zclock_log ("%6d:         $ $(name) $(message:c)", client->client_id);
.           endif
                        $(proto)_set_id (client->client.reply, $(PROTO)_$(MESSAGE:C));
.           if switches.trace ?= 1
                        zclock_log ("%6d: Send message to client", client->client_id);
                        $(proto)_dump (client->client.reply);
.           endif
                        $(proto)_send (&(client->client.reply), self->router);
                        client->client.reply = $(proto)_new (0);
                        $(proto)_set_routing_id (client->client.reply, client->routing_id);
.       elsif name = "terminate"
                        //  terminate
.           if switches.animate ?= 1
                        zclock_log ("%6d:         $ $(name)", client->client_id);
.           endif
                        client->next_event = terminate_event;
.       else
                        //  $(name)
.           if switches.animate ?= 1
                        zclock_log ("%6d:         $ $(name)", client->client_id);
.           endif
                        $(name:c) (&client->client);
.       endif
                    }
.   endfor
.   if defined (event.next)
                    if (!client->exception) {
                        client->state = $(next:c)_state;
.       for class.state where name = next
.           if defined (state.external)
                        client->external_state = true;
                        $(proto)_t *request = ($(proto)_t *) zlist_pop (client->requests);
                        if (request)
                            client->next_event = s_client_accept (client, request);
.           else
                        client->external_state = false;
.           endif
.       endfor
                    }
.   endif
.endmacro

//  Execute state machine as long as we have events

static void
s_server_client_execute (s_server_t *self, s_client_t *client, int event)
{
    client->next_event = event;
    while (client->next_event) {
        client->event = client->next_event;
        client->next_event = (event_t) 0;
        client->exception = (event_t) 0;
.if switches.animate ?= 1
        zclock_log ("%6d: %s:",
            client->client_id, s_state_name [client->state]);
        zclock_log ("%6d:     %s",
            client->client_id, s_event_name [client->event]);
.endif
        switch (client->state) {
.for class.state
            case $(name:c)_state:
.   for event where name <> "$other"
.       if index () > 1
                else
.       endif
                if (client->event == $(name:c)_event) {
.       output_event_body ()
                }
.   endfor
.   for event where name = "$other"
                else {
                    //  Process all other events
.       output_event_body ()
                }
.   else
                else
                    zclock_log ("%6d: W: unhandled event %s in %s",
                        client->client_id,
                        s_event_name [client->event],
                        s_state_name [client->state]);
.   endfor
                break;

.endfor
        }
        if (client->exception) {
.if switches.animate ?= 1
            zclock_log ("%6d:         ! %s",
                client->client_id, s_event_name [client->exception]);
.endif
            client->next_event = client->exception;
        }
        else {
.if switches.animate ?= 1
            zclock_log ("%6d:         > %s",
                client->client_id, s_state_name [client->state]);
.endif
        }
        if (client->next_event == terminate_event) {
            //  Automatically calls s_client_destroy
            zhash_delete (self->clients, client->hashkey);
            break;
        }
    }
}

//  Handle a message (a protocol request) from the client

static void
s_server_client_message (s_server_t *self)
{
    $(proto)_t *request = $(proto)_recv (self->router);
    if (!request)
        return;         //  Interrupted; do nothing

    char *hashkey = zframe_strhex ($(proto)_routing_id (request));
    s_client_t *client = (s_client_t *) zhash_lookup (self->clients, hashkey);
    if (client == NULL) {
        client = s_client_new (self, $(proto)_routing_id (request));
        zhash_insert (self->clients, hashkey, client);
        zhash_freefn (self->clients, hashkey, s_client_free);
    }
    free (hashkey);
.if switches.trace ?= 1
    zclock_log ("%6d: Client message", client->client_id);
    $(proto)_dump (request);
.endif

    //  Any input from client counts as activity
    client->expires_at = zclock_time () + self->timeout;

    //  Send message to state machine if we're in an external state
    if (client->external_state)
        s_server_client_execute (self, client, s_client_accept (client, request));
    else
        //  Otherwise queue request for later
        zlist_push (client->requests, request);
}

//  Finally here's the server thread itself, which polls its two
//  sockets and processes incoming messages
static void
s_server_task (void *args, zctx_t *ctx, void *pipe)
{
.if switches.trace ?= 1
    zclock_log ("Initialize background server task");
.endif
    s_server_t *self = s_server_new (ctx, pipe);
    assert (self);
    zstr_send (self->pipe, "OK");

    zmq_pollitem_t items [] = {
        { self->pipe, 0, ZMQ_POLLIN, 0 },
        { self->router, 0, ZMQ_POLLIN, 0 }
    };
    self->monitor_at = zclock_time () + self->monitor;
    while (!self->terminated && !zctx_interrupted) {
        //  Calculate tickless timer, up to monitor time
        uint64_t tickless = zclock_time () + self->monitor;
        zhash_foreach (self->clients, s_client_tickless, &tickless);

        //  Poll until at most next timer event
        int rc = zmq_poll (items, 2,
            (tickless - zclock_time ()) * ZMQ_POLL_MSEC);
        if (rc == -1)
            break;              //  Context has been shut down

        //  Process incoming message from either socket
        if (items [0].revents & ZMQ_POLLIN)
            s_server_control_message (self);

        if (items [1].revents & ZMQ_POLLIN)
            s_server_client_message (self);

        //  Execute client timer events
        zhash_foreach (self->clients, s_client_timer, self);
        
        //  If clock went past timeout, then monitor server
        if (zclock_time () >= self->monitor_at) {
.   if count (class.action, name = "monitor the server")
.#          generate a monitor event in current state
.#          do this only if monitor event is defined
.   endif
            self->monitor_at = zclock_time () + self->monitor;
        }
    }
    s_server_destroy (&self);
}
.#  Generate source file first time only
.source_file = "$(class.source)/$(class.name).c"
.if !file.exists (source_file)
.   output source_file
/*  =========================================================================
    $(class.name) - $(class.title:)

    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

/*
@header
    Description of class for man page.
@discuss
    Detailed discussion of the class, if any.
@end
*/

#include <czmq.h>
#include "../include/$(class.proto).h"
#include "../include/$(class.name).h"

//  ---------------------------------------------------------------------
//  Forward declarations for the two main classes we use here

typedef struct _server_t server_t;
typedef struct _client_t client_t;

//  This structure defines the context for each running server. Store
//  whatever properties and structures you need for the server.

struct _server_t {
    //  Add any properties you need here
    int filler;             //  Structure can't be empty (pedantic)
};

//  Allocate properties and structures for a new server instance.
//  Return 0 if OK, or -1 if there was an error.

static int
server_initialize (server_t *self)
{
    //  Construct properties here
    return 0;
}

//  Free properties and structures for a server instance

static void
server_terminate (server_t *self)
{
    //  Destroy properties here
}


//  ---------------------------------------------------------------------
//  This structure defines the state for each client connection. It will
//  be passed to each action in the 'self' argument.

struct _client_t {
    //  These properties must always be present in the client_t
    server_t *server;           //  Reference to parent server
    $(proto)_t *request;        //  Last received request
    $(proto)_t *reply;          //  Reply to send out, if any
    //  These properties are specific for this application
};

//  Allocate properties and structures for a new client connection
//  Return 0 if OK, or -1 if there was an error.

static int
client_initialize (client_t *self)
{
    //  Construct properties here
    return 0;
}

//  Free properties and structures for a client connection

static void
client_terminate (client_t *self)
{
    //  Destroy properties here
}

//  Include the generated server engine
#include "$(class.name)_engine.h"


//  --------------------------------------------------------------------------
//  Selftest

void
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): \\n");
    
    //  @selftest
    zctx_t *ctx = zctx_new ();

    $(class.name)_t *self = $(class.name)_new ();
    assert (self);
    $(class.name)_bind (self, "tcp://localhost:5670");

    void *dealer = zsocket_new (ctx, ZMQ_DEALER);
    assert (dealer);
    zsocket_set_rcvtimeo (dealer, 2000);
    zsocket_connect (dealer, "tcp://localhost:5670");

    $(proto)_t *request, *reply;
    request = $(proto)_new ($(PROTO)_something);
    //  Set properties for test request
    $(proto)_send (&request, dealer);
    reply = $(proto)_recv (dealer);
    assert (reply);
    assert ($(proto)_id (reply) == $(PROTO)_something);
    $(proto)_destroy (&reply);
    $(class.name)_destroy (&self);

    zctx_destroy (&ctx);
    //  @end

    //  No clean way to wait for a background thread to exit
    //  Under valgrind this will randomly show as leakage
    //  Reduce this by giving server thread time to exit
    zclock_sleep (200);
    printf ("OK\\n");
    return 0;
}
.endif
.close
.template 0

#   Append missing prototypes to source file
input = file.open (source_file)
xline = file.read (input)
while defined (xline)
    #   Look for function declarations
    if regexp.match ("^(\\w+) \\(", xline, token)
        for class.prototype where name = token
            prototype.exists = 1
        endfor
    endif
    xline = file.read (input)?
endwhile
file.close (input)

append source_file
for class.prototype where exists = 0
    echo "Generating stub for $(name)..."
    >
    >
    >//  --------------------------------------------------------------------------
    >//  $(name)
    >//
    >
    >static $(ctype)
    >$(name) ($(args))
    >{
    if ctype = "long"
        >    return 0;
    elsif ctype = "char *"
        >    return NULL
    else
        >
    endif
    >}
endfor
.endtemplate
