.template 0
#   zproto_class_c.gsl
#
#   Generates a server class for a protocol specification
#   This manages ROUTER server talking to DEALER clients
#
include "zproto_lib.gsl"
resolve_includes ()
set_defaults ()

#   Load message structures for this engine
global.proto = xml.load_file (class.proto + ".xml")

#   Lowercase state/event/action names
for class.state
    state.name = "$(name)"
    for event
        event.name = "$(name)"
        if defined (event.next)
            event.next = "$(next)"
        endif
        for action
            action.name = "$(name)"
        endfor
    endfor
endfor

#   Lowecase protocol message names
for proto.message
    message.name = "$(name)"
endfor

#  Collect all events and actions at class level
for class.state
    state.comma = last()?? ""? ","
    for event where name <> "*"
        #   Mark event as external if it a protocol message
        if count (proto.message, message.name = event.name)
            event.external = 1
        endif
        #   Copy event to class if not yet defined there
        if count (class.event, name = -1.name) = 0
            copy event to class
        endif
        for action where count (class.action, name = -1.name) = 0
            copy action to class
        endfor
    endfor
endfor

#   Process super states
for class.state where defined (inherit)
    for class.state as superstate where name = inherit
        for event where count (state.event, event.name) = 0
            copy event to state
        endfor
    else
        echo "E: superstate $(inherit) isn't defined"
    endfor
endfor

#   Collect prototypes that we need
for class.action
    if name <> "send" \
    &  name <> "terminate"
        new class.prototype
            prototype.name = "$(action.name:c)"
            prototype.ctype = "void"
            prototype.exists = 0
            prototype.args = "client_t *self"
        endnew
    endif
endfor

.endtemplate
.output "../include/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************

.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  @interface
//  To work with $(class.name), use the CZMQ zactor API:
//
//  Create new $(class.title) instance, passing logging prefix:
//
//      zactor_t *$(class.title:c) = zactor_new ($(class.name), "myname");
//  
//  Destroy $(class.title) instance
//
//      zactor_destroy (&$(class.title:c));
//  
//  Bind $(class.title) to specified endpoint. TCP endpoints may specify
//  the port number as "*" to aquire an ephemeral port:
//
//      zstr_sendx ($(class.title:c), "BIND", endpoint, NULL);
//
//  Return assigned port number, specifically when BIND was done using an
//  an ephemeral port:
//
//      zstr_sendx ($(class.title:c), "PORT", NULL);
//      char *command, *port_str;
//      zstr_recvx ($(class.title:c), &command, &port_str, NULL);
//      assert (streq (command, "PORT"));
//
//  Specify configuration file to load, overwriting any previous loaded
//  configuration file or options:
//
//      zstr_sendx ($(class.title:c), "CONFIGURE", filename, NULL);
//
//  Set configuration path value:
//
//      zstr_sendx ($(class.title:c), "SET", path, value, NULL);
//    
//  Send zmsg_t instance to $(class.title):
//
//      zactor_send ($(class.title:c), &msg);
//
//  Receive zmsg_t instance from $(class.title):
//
//      zmsg_t *msg = zactor_recv ($(class.title:c));
//
//  This is the $(class.name) constructor as a zactor_fn:
//
CZMQ_EXPORT void
    $(class.name) (zsock_t *pipe, void *args);

//  Self test of this class
CZMQ_EXPORT void
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.output "../include/$(class.name)_engine.h"
/*  =========================================================================
    $(class.name)_engine - $(class.title:) engine

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************

.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/


//  ---------------------------------------------------------------------
//  State machine constants

typedef enum {
.for class.state
.   state.comma = last()?? ""? ","
    $(name:c)_state = $(index ())$(comma)
.endfor
} state_t;

typedef enum {
    terminate_event = -1,
    NULL_event = 0,
.for class.event
.   event.comma = last()?? ""? ","
    $(name:c)_event = $(index ())$(comma)
.endfor
} event_t;

//  Names for animation and error reporting
static char *
s_state_name [] = {
    "(NONE)",
.for class.state
    "$(name)"$(comma)
.endfor
};

static char *
s_event_name [] = {
    "(NONE)",
.for class.event
.   if defined (event.external)
    "$(NAME)"$(comma)
.   else
    "$(name)"$(comma)
.   endif
.endfor
};
 

//  ---------------------------------------------------------------------
//  Context for the whole server task. This embeds the application-level
//  server context at its start (the entire structure, not a reference),
//  so we can cast a pointer between server_t and s_server_t arbitrarily.

typedef struct {
    server_t server;            //  Application-level server context
    zsock_t *pipe;              //  Socket to back to caller API
    zsock_t *router;            //  Socket to talk to clients
    int port;                   //  Server port bound to
    zloop_t *loop;              //  Reactor for server sockets
    zhash_t *clients;           //  Clients we're connected to
    zconfig_t *config;          //  Configuration tree
    uint client_id;             //  Client identifier counter
    size_t timeout;             //  Default client expiry timeout
    bool animate;               //  Is animation enabled?
    char *log_prefix;           //  Default log prefix
} s_server_t;


//  ---------------------------------------------------------------------
//  Context for each connected client. This embeds the application-level
//  client context at its start (the entire structure, not a reference),
//  so we can cast a pointer between client_t and s_client_t arbitrarily.

typedef struct {
    client_t client;            //  Application-level client context
    s_server_t *server;         //  Parent server context
    char *hashkey;              //  Key into server->clients hash
    zframe_t *routing_id;       //  Routing_id back to client
    uint unique_id;             //  Client identifier in server
    zlist_t *mailbox;           //  Incoming messages
    state_t state;              //  Current state
    event_t event;              //  Current event
    event_t next_event;         //  The next event
    event_t exception;          //  Exception event, if any
    int expiry_timer;           //  zloop timer for client timeouts
    int wakeup_timer;           //  zloop timer for client alarms
    event_t wakeup_event;       //  Wake up with this event
    char log_prefix [41];       //  Log prefix string
} s_client_t;

static int
    server_initialize (server_t *self);
static void
    server_terminate (server_t *self);
static zmsg_t *
    server_method (server_t *self, const char *method, zmsg_t *msg);
static int
    client_initialize (client_t *self);
static void
    client_terminate (client_t *self);
static void
    s_client_execute (s_client_t *client, int event);
static int
    s_client_wakeup (zloop_t *loop, int timer_id, void *argument);
.for class.prototype
static $(ctype)
    $(name) ($(args));
.endfor

//  ---------------------------------------------------------------------
//  These methods are an internal API for actions

//  Set the next event, needed in at least one action in an internal
//  state; otherwise the state machine will wait for a message on the
//  router socket and treat that as the event.

static void
engine_set_next_event (client_t *client, event_t event)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        self->next_event = event;
    }
}

//  Raise an exception with 'event', halting any actions in progress.
//  Continues execution of actions defined for the exception event.

static void
engine_set_exception (client_t *client, event_t event)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        self->exception = event;
    }
}

//  Set wakeup alarm after 'delay' msecs. The next state should
//  handle the wakeup event. The alarm is cancelled on any other
//  event.

static void
engine_set_wakeup_event (client_t *client, size_t delay, event_t event)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        if (self->wakeup_timer) {
            zloop_timer_end (self->server->loop, self->wakeup_timer);
            self->wakeup_timer = 0;
        }
        self->wakeup_timer = zloop_timer (
            self->server->loop, delay, 1, s_client_wakeup, self);
        self->wakeup_event = event;
    }
}

//  Execute 'event' on specified client. Use this to send events to
//  other clients. Cancels any wakeup alarm on that client.

static void
engine_send_event (client_t *client, event_t event)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        s_client_execute (self, event);
    }
}

//  Execute 'event' on all clients known to the server. If you pass a
//  client argument, that client will not receive the broadcast. If you
//  want to pass any arguments, store them in the server context.

static void
engine_broadcast_event (server_t *server, client_t *client, event_t event)
{
    if (server) {
        s_server_t *self = (s_server_t *) server;
        zlist_t *keys = zhash_keys (self->clients);
        char *key = (char *) zlist_first (keys);
        while (key) {
            s_client_t *target = (s_client_t *) zhash_lookup (self->clients, key);
            if (target != (s_client_t *) client)
                s_client_execute (target, event);
            key = (char *) zlist_next (keys);
        }
        zlist_destroy (&keys);
    }
}

//  Poll socket for activity, invoke handler on any received message.
//  Handler must be a CZMQ zloop_fn function; receives server as arg.

static void
engine_handle_socket (server_t *server, zsock_t *socket, zloop_reader_fn handler)
{
    if (server) {
        s_server_t *self = (s_server_t *) server;
        if (handler) {
            int rc = zloop_reader (self->loop, socket, handler, self);
            assert (rc == 0);
            zloop_reader_set_tolerant (self->loop, socket);
        }
        else
            zloop_reader_end (self->loop, socket);
    }
}

//  Register monitor function that will be called at regular intervals
//  by the server engine

static void
engine_set_monitor (server_t *server, size_t interval, zloop_timer_fn monitor)
{
    if (server) {
        s_server_t *self = (s_server_t *) server;
        int rc = zloop_timer (self->loop, interval, 0, monitor, self);
        assert (rc >= 0);
    }
}

//  Set log file prefix; this string will be added to log data, to make
//  log data more searchable. The string is truncated to ~20 chars.

static void
engine_set_log_prefix (client_t *client, const char *string)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        snprintf (self->log_prefix, sizeof (self->log_prefix) - 1,
            "%6d:%-33s", self->unique_id, string);
    }
}

//  Set a configuration value in the server's configuration tree.
//  The properties this engine uses are: server/animate,
//  server/timeout, and server/background. You can also configure
//  other abitrary properties.

static void
engine_configure (server_t *server, const char *path, const char *value)
{
    if (server) {
        s_server_t *self = (s_server_t *) server;
        zconfig_put (self->config, path, value);
    }
}

//  Pedantic compilers don't like unused functions, so we call the whole
//  API, passing null references. It's nasty and horrid and sufficient.

static void
s_satisfy_pedantic_compilers (void)
{
    engine_set_next_event (NULL, NULL_event);
    engine_set_exception (NULL, NULL_event);
    engine_set_wakeup_event (NULL, 0, NULL_event);
    engine_send_event (NULL, NULL_event);
    engine_broadcast_event (NULL, NULL, NULL_event);
    engine_handle_socket (NULL, 0, NULL);
    engine_set_monitor (NULL, 0, NULL);
    engine_set_log_prefix (NULL, NULL);
    engine_configure (NULL, NULL, NULL);
}


//  ---------------------------------------------------------------------
//  Generic methods on protocol messages
//  TODO: replace with lookup table, since ID is one byte

static event_t
s_protocol_event ($(proto)_t *request)
{
    assert (request);
    switch ($(proto)_id (request)) {
.   for proto.message where count (class.event, event.name = message.name) = 1
        case $(PROTO)_$(NAME:C):
            return $(name:c)_event;
            break;
.   endfor
        default:
            //  Invalid $(proto)_t
            return terminate_event;
    }
}


//  ---------------------------------------------------------------------
//  Client methods

static s_client_t *
s_client_new (s_server_t *server, zframe_t *routing_id)
{
    s_client_t *self = (s_client_t *) zmalloc (sizeof (s_client_t));
    assert (self);
    assert ((s_client_t *) &self->client == self);
    
    self->server = server;
    self->hashkey = zframe_strhex (routing_id);
    self->routing_id = zframe_dup (routing_id);
    self->mailbox = zlist_new ();
    self->unique_id = server->client_id++;
    engine_set_log_prefix (&self->client, server->log_prefix);

    self->client.server = (server_t *) server;
    self->client.reply = $(proto)_new (0);
    $(proto)_set_routing_id (self->client.reply, self->routing_id);

    //  Give application chance to initialize and set next event
.for class.state where item () = 1
    self->state = $(name:c)_state;
.endfor
    self->event = NULL_event;
    client_initialize (&self->client);
    return self;
}

static void
s_client_destroy (s_client_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        s_client_t *self = *self_p;
        $(proto)_destroy (&self->client.request);
        $(proto)_destroy (&self->client.reply);
        
        if (self->wakeup_timer)
            zloop_timer_end (self->server->loop, self->wakeup_timer);
        if (self->expiry_timer)
            zloop_timer_end (self->server->loop, self->expiry_timer);

        //  Empty and destroy mailbox
        $(proto)_t *request = ($(proto)_t *) zlist_first (self->mailbox);
        while (request) {
            $(proto)_destroy (&request);
            request = ($(proto)_t *) zlist_next (self->mailbox);
        }
        zlist_destroy (&self->mailbox);
        zframe_destroy (&self->routing_id);
        client_terminate (&self->client);
        free (self->hashkey);
        free (self);
        *self_p = NULL;
    }
}

//  Callback when we remove client from 'clients' hash table
static void
s_client_free (void *argument)
{
    s_client_t *client = (s_client_t *) argument;
    s_client_destroy (&client);
}

//  Do we accept a request off the mailbox? If so, return the event for
//  the message, and load the message into the current client request.
//  If not, return NULL_event;

static event_t
s_client_filter_mailbox (s_client_t *self)
{
    assert (self);
    
    $(proto)_t *request = ($(proto)_t *) zlist_first (self->mailbox);
    while (request) {
        //  Check whether current state can process event
        //  This should be changed to a pre-built lookup table
        event_t event = s_protocol_event (request);
        bool event_is_valid;
.for class.state
.   if count (event, event.name = "*")
        if (self->state == $(state.name:c)_state)
            event_is_valid = true;
        else
.   else
.       for event where defined (external)
        if (self->state == $(state.name:c)_state && event == $(name:c)_event)
            event_is_valid = true;
        else
.       endfor
.   endif
.endfor
            event_is_valid = false;
            
        if (event_is_valid) {
            zlist_remove (self->mailbox, request);
            $(proto)_destroy (&self->client.request);
            self->client.request = request;
            return event;
        }
        request = ($(proto)_t *) zlist_next (self->mailbox);
    }
    return NULL_event;
}

.macro output_action_body ()
.       for action
                    if (!self->exception) {
.           if name = "send"
                        //  send $(message:c)
                        if (self->server->animate)
                            zsys_debug ("%s:         $ $(name) $(MESSAGE:c)",
                                self->log_prefix);
                        $(proto)_set_id (self->client.reply, $(PROTO)_$(MESSAGE:C));
.               if switches.trace ?= 1
                        zsys_debug ("%s: Send message to client", self->log_prefix);
                        $(proto)_print (self->client.reply);
.               endif
                        $(proto)_send (&self->client.reply, self->server->router);
                        self->client.reply = $(proto)_new (0);
                        $(proto)_set_routing_id (self->client.reply, self->routing_id);
.           elsif name = "terminate"
                        //  terminate
                        if (self->server->animate)
                            zsys_debug ("%s:         $ $(name)", self->log_prefix);
                        self->next_event = terminate_event;
.           else
                        //  $(name)
                        if (self->server->animate)
                            zsys_debug ("%s:         $ $(name)", self->log_prefix);
                        $(name:c) (&self->client);
.           endif
                    }
.       endfor
.       if defined (event.next)
                    if (!self->exception)
                        self->state = $(next:c)_state;
.       endif
.endmacro

//  Execute state machine as long as we have events

static void
s_client_execute (s_client_t *self, int event)
{
    self->next_event = (event_t) event;
    //  Cancel wakeup timer, if any was pending
    if (self->wakeup_timer) {
        zloop_timer_end (self->server->loop, self->wakeup_timer);
        self->wakeup_timer = 0;
    }
    while (self->next_event != NULL_event) {
        self->event = self->next_event;
        self->next_event = NULL_event;
        self->exception = NULL_event;
        if (self->server->animate) {
            zsys_debug ("%s: %s:",
                self->log_prefix, s_state_name [self->state]);
            zsys_debug ("%s:     %s",
                self->log_prefix, s_event_name [self->event]);
        }
        switch (self->state) {
.for class.state
.   if index () > 1

.   endif
            case $(name:c)_state:
.   for event where name <> "*"
.       if index () > 1
                else
.       endif
                if (self->event == $(name:c)_event) {
.       output_action_body ()
                }
.   endfor
.   for event where name = "*"
.       if item () > 1
                else {
.       else
                {
.       endif
                    //  Handle unexpected protocol events
.       output_action_body ()
                }
.   else
                else {
                    //  Handle unexpected internal events
                    zsys_warning ("%s: unhandled event %s in %s",
                        self->log_prefix,
                        s_event_name [self->event],
                        s_state_name [self->state]);
                    assert (false);
                }
.   endfor
                break;
.endfor
        }
        //  If we had an exception event, interrupt normal programming
        if (self->exception) {
            if (self->server->animate)
                zsys_debug ("%s:         ! %s",
                    self->log_prefix, s_event_name [self->exception]);

            self->next_event = self->exception;
        }
        if (self->next_event == terminate_event) {
            //  Automatically calls s_client_destroy
            zhash_delete (self->server->clients, self->hashkey);
            break;
        }
        else {
            if (self->server->animate)
                zsys_debug ("%s:         > %s",
                    self->log_prefix, s_state_name [self->state]);

            if (self->next_event == NULL_event)
                //  Get next valid message from mailbox, if any
                self->next_event = s_client_filter_mailbox (self);
        }
    }
}

.if count (class.event, name = "expired")
//  zloop callback when client inactivity timer expires

static int
s_client_expired (zloop_t *loop, int timer_id, void *argument)
{
    s_client_t *self = (s_client_t *) argument;
    s_client_execute (self, expired_event);
    return 0;
}

.endif
//  zloop callback when client wakeup timer expires

static int
s_client_wakeup (zloop_t *loop, int timer_id, void *argument)
{
    s_client_t *self = (s_client_t *) argument;
    s_client_execute (self, self->wakeup_event);
    return 0;
}


//  Server methods

static void
s_server_config_self (s_server_t *self)
{
    //  Built-in server configuration options
    //  
    //  Animation is disabled by default
    self->animate = atoi (
        zconfig_resolve (self->config, "server/animate", "0"));

    //  Default client timeout is 60 seconds
    self->timeout = atoi (
        zconfig_resolve (self->config, "server/timeout", "60000"));

    //  Do we want to run server in the background?
    int background = atoi (
        zconfig_resolve (self->config, "server/background", "0"));
    if (!background)
        zsys_set_logstream (stdout);
}

static s_server_t *
s_server_new (zsock_t *pipe)
{
    s_server_t *self = (s_server_t *) zmalloc (sizeof (s_server_t));
    assert (self);
    assert ((s_server_t *) &self->server == self);

    self->pipe = pipe;
    self->router = zsock_new (ZMQ_ROUTER);
    //  By default the socket will discard outgoing messages above the
    //  HWM of 1,000. This isn't helpful for high-volume streaming. We
    //  will use a unbounded queue here. If applications need to guard
    //  against queue overflow, they should use a credit-based flow
    //  control scheme.
    zsock_set_unbounded (self->router);
    self->clients = zhash_new ();
    self->config = zconfig_new ("root", NULL);
    self->loop = zloop_new ();
    srandom ((unsigned int) zclock_time ());
    self->client_id = randof (1000);
.if switches.trace ?= 1
    zloop_set_verbose (self->loop, true);
.endif
    s_server_config_self (self);

    //  Initialize application server context
    self->server.pipe = self->pipe;
    self->server.config = self->config;
    server_initialize (&self->server);

    s_satisfy_pedantic_compilers ();
    return self;
}

static void
s_server_destroy (s_server_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        s_server_t *self = *self_p;
        server_terminate (&self->server);
        zsock_destroy (&self->router);
        zconfig_destroy (&self->config);
        zhash_destroy (&self->clients);
        zloop_destroy (&self->loop);
        free (self);
        *self_p = NULL;
    }
}

//  Apply configuration tree:
//   * apply server configuration
//   * print any echo items in top-level sections
//   * apply sections that match methods

static void
s_server_apply_config (s_server_t *self)
{
    //  Apply echo commands and class methods
    zconfig_t *section = zconfig_locate (self->config, "$(name)");
    if (section)
        section = zconfig_child (section);

    while (section) {
        if (streq (zconfig_name (section), "echo"))
            zsys_notice ("%s", zconfig_value (section));
        else
        if (streq (zconfig_name (section), "bind")) {
            char *endpoint = zconfig_resolve (section, "endpoint", "?");
            if (zsock_bind (self->router, "%s", endpoint) == -1)
                zsys_warning ("failed to bind to %s", endpoint);
        }
        section = zconfig_next (section);
    }
    s_server_config_self (self);
}

//  Process message from pipe

static int
s_server_api_message (zloop_t *loop, zsock_t *reader, void *argument)
{
    s_server_t *self = (s_server_t *) argument;
    zmsg_t *msg = zmsg_recv (self->pipe);
    if (!msg)
        return -1;              //  Interrupted; exit zloop
.if switches.trace ?= 1
    zsys_debug ("API message:");
    zmsg_print (msg);
.endif
    char *method = zmsg_popstr (msg);
    if (streq (method, "$TERM")) {
        //  Shutdown the engine
        free (method);
        zmsg_destroy (&msg);
        return -1;
    }
    else
    if (streq (method, "BIND")) {
        //  Bind to a specified endpoint, which may use an ephemeral port
        char *endpoint = zmsg_popstr (msg);
        self->port = zsock_bind (self->router, "%s", endpoint);
        if (self->port == -1)
            zsys_warning ("failed to bind to %s", endpoint);
        free (endpoint);
    }
    else
    if (streq (method, "PORT")) {
        //  Return PORT + port number from the last bind, if any
        zstr_sendm (self->pipe, "PORT");
        zstr_sendf (self->pipe, "%d", self->port);
    }
    else
    if (streq (method, "CONFIGURE")) {
        char *config_file = zmsg_popstr (msg);
        zconfig_destroy (&self->config);
        self->config = zconfig_load (config_file);
        if (self->config) {
            s_server_apply_config (self);
            self->server.config = self->config;
        }
        else {
            zsys_warning ("cannot load config file '%s'\\n", config_file);
            self->config = zconfig_new ("root", NULL);
        }
        free (config_file);
    }
    else
    if (streq (method, "SET")) {
        char *path = zmsg_popstr (msg);
        char *value = zmsg_popstr (msg);
        zconfig_put (self->config, path, value);
        s_server_config_self (self);
        free (path);
        free (value);
    }
    else {
        //  Execute custom method
        zmsg_t *reply = server_method (&self->server, method, msg);
        //  If reply isn't null, send it to caller
        zmsg_send (&reply, self->pipe);
    }
    free (method);
    zmsg_destroy (&msg);
    return 0;
}

//  Handle a message (a protocol request) from the client

static int
s_server_client_message (zloop_t *loop, zsock_t *reader, void *argument)
{
    s_server_t *self = (s_server_t *) argument;
    $(proto)_t *msg = $(proto)_recv (self->router);
    if (!msg)
        return -1;              //  Interrupted; exit zloop

    char *hashkey = zframe_strhex ($(proto)_routing_id (msg));
    s_client_t *client = (s_client_t *) zhash_lookup (self->clients, hashkey);
    if (client == NULL) {
        client = s_client_new (self, $(proto)_routing_id (msg));
        zhash_insert (self->clients, hashkey, client);
        zhash_freefn (self->clients, hashkey, s_client_free);
    }
    free (hashkey);
.if switches.trace ?= 1
    zsys_debug ("%d: Client message", client->unique_id);
    $(proto)_print (msg);
.endif

.   if count (class.event, name = "expired")
    //  Any input from client counts as activity
    if (client->expiry_timer)
        zloop_timer_end (self->loop, client->expiry_timer);
    //  Reset expiry timer
    client->expiry_timer = zloop_timer (
        self->loop, self->timeout, 1, s_client_expired, client);
        
.endif
    //  Queue request and possibly pass it to client state machine
    zlist_append (client->mailbox, msg);
    event_t event = s_client_filter_mailbox (client);
    if (event != NULL_event)
        s_client_execute (client, event);
        
    return 0;
}

//  Watch server config file and reload if changed

static int
s_watch_server_config (zloop_t *loop, int timer_id, void *argument)
{
    s_server_t *self = (s_server_t *) argument;
    if (zconfig_has_changed (self->config)
    &&  zconfig_reload (&self->config) == 0) {
        s_server_config_self (self);
        self->server.config = self->config;
        zsys_notice ("reloaded configuration from %s",
            zconfig_filename (self->config));
    }
    return 0;
}


//  ---------------------------------------------------------------------
//  This is the server actor, which polls its two sockets and processes
//  incoming messages

void
$(class.name) (zsock_t *pipe, void *args)
{
    //  Initialize
    s_server_t *self = s_server_new (pipe);
    assert (self);
    zsock_signal (pipe, 0);
    //  Actor argument may be a string used for logging
    self->log_prefix = args? (char *) args: "";

    //  Set-up server monitor to watch for config file changes
    engine_set_monitor ((server_t *) self, 1000, s_watch_server_config);
    //  Set up handler for the two main sockets the server uses
    engine_handle_socket ((server_t *) self, self->pipe, s_server_api_message);
    engine_handle_socket ((server_t *) self, self->router, s_server_client_message);

    //  Run reactor until there's a termination signal
    zloop_start (self->loop);

    //  Reactor has ended
    s_server_destroy (&self);
}
.#  Generate source file first time only
.source_file = "../src/$(class.name).c"
.if !file.exists (source_file)
.   output source_file
/*  =========================================================================
    $(class.name) - $(class.title:)

.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    Description of class for man page.
@discuss
    Detailed discussion of the class, if any.
@end
*/

#include <czmq.h>
#include "../include/$(class.proto).h"
#include "../include/$(class.name).h"

//  ---------------------------------------------------------------------
//  Forward declarations for the two main classes we use here

typedef struct _server_t server_t;
typedef struct _client_t client_t;

//  This structure defines the context for each running server. Store
//  whatever properties and structures you need for the server.

struct _server_t {
    //  These properties must always be present in the server_t
    //  and are set by the generated engine; do not modify them!
    zsock_t *pipe;              //  Actor pipe back to caller
    zconfig_t *config;          //  Current loaded configuration
    
    //  Add any properties you need here
};

//  ---------------------------------------------------------------------
//  This structure defines the state for each client connection. It will
//  be passed to each action in the 'self' argument.

struct _client_t {
    //  These properties must always be present in the client_t
    //  and are set by the generated engine; do not modify them!
    server_t *server;           //  Reference to parent server
    $(proto)_t *request;        //  Last received request
    $(proto)_t *reply;          //  Reply to send out, if any

    //  These properties are specific for this application
};

//  Include the generated server engine
#include "$(class.name)_engine.h"

//  Allocate properties and structures for a new server instance.
//  Return 0 if OK, or -1 if there was an error.

static int
server_initialize (server_t *self)
{
    //  Construct properties here
    return 0;
}

//  Free properties and structures for a server instance

static void
server_terminate (server_t *self)
{
    //  Destroy properties here
}

//  Process server API method, return reply message if any

static zmsg_t *
server_method (server_t *self, const char *method, zmsg_t *msg)
{
    return NULL;
}


//  Allocate properties and structures for a new client connection and
//  optionally engine_set_next_event (). Return 0 if OK, or -1 on error.

static int
client_initialize (client_t *self)
{
    //  Construct properties here
    return 0;
}

//  Free properties and structures for a client connection

static void
client_terminate (client_t *self)
{
    //  Destroy properties here
}

//  --------------------------------------------------------------------------
//  Selftest

void
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): \\n");
    
    //  @selftest
    zactor_t *server = zactor_new ($(class.name), "server");
    zstr_sendx (server, "SET", "server/animate", verbose? "1": "0", NULL);
    zstr_sendx (server, "BIND", "ipc://@/$(class.name)", NULL);

    zsock_t *client = zsock_new (ZMQ_DEALER);
    assert (client);
    zsock_set_rcvtimeo (client, 2000);
    zsock_connect (client, "ipc://@/$(class.name)");

    $(proto)_t *request, *reply;
    request = $(proto)_new ($(PROTO)_something);
    //  Set properties for test request
    $(proto)_send (&request, client);
    reply = $(proto)_recv (client);
    assert (reply);
    assert ($(proto)_id (reply) == $(PROTO)_something);
    $(proto)_destroy (&reply);
    $(class.name)_destroy (&server);
    
    zsock_destroy (&client);
    zactor_destroy (&server);
    //  @end
    printf ("OK\\n");
}
.endif
.close
.template 0

#   Append missing prototypes to source file
input = file.open (source_file)
xline = file.read (input)
while defined (xline)
    #   Look for function declarations
    if regexp.match ("^(\\w+) \\(", xline, token)
        for class.prototype where name = token
            prototype.exists = 1
        endfor
    endif
    xline = file.read (input)?
endwhile
file.close (input)

append source_file
for class.prototype where exists = 0
    echo "Generating stub for $(name)..."
    >
    >
    >//  --------------------------------------------------------------------------
    >//  $(name)
    >//
    >
    >static $(ctype)
    >$(name) ($(args))
    >{
    if ctype = "long"
        >    return 0;
    elsif ctype = "char *"
        >    return NULL
    else
        >
    endif
    >}
endfor
.endtemplate
