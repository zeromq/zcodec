.template 0
#   zproto_codec_java.gsl
#
#   Generates a codec for a protocol specification
#
include "zproto_lib.gsl"
include "zproto_lib_java.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate
.global.ClassName = java_class_name($(class.name))
.global.namespace ?= switches.namespace? "org.zproto"
.global.name_path ?= switches.name_path? "org/zproto"
.global.topdir ?= switches.topdir? "."
.directory.create ("$(topdir)/main/java/$(name_path)")
.output "$(topdir)/main/java/$(name_path)/$(ClassName).java"
/*  =========================================================================
    $(ClassName) - $(class.title:)

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*  These are the $(ClassName) messages:
.for message

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
        $(name)             $(type) $(size)\
                                        $(field.?'':)
.       elsif type = "octets"
        $(name)             $(type) [$(size)]\
                                        $(field.?'':)
.       else
        $(name)             $(type)     $(field.?'':)
.       endif
.   endfor
.endfor
*/

package $(namespace);

import java.util.*;
import java.nio.ByteBuffer;

import org.zeromq.ZFrame;
import org.zeromq.ZMsg;
import org.zeromq.ZMQ;
import org.zeromq.ZMQ.Socket;

public class $(ClassName) implements java.io.Closeable
{
.for define
    public static final int $(CLASS.NAME)_$(DEFINE.NAME:C)  = $(value);
.endfor

.for message
    public static final int $(MESSAGE.NAME)       = $(id);
.endfor
.for class.field where type = "octets"
    public static final int $(FIELD.NAME)_SIZE    = $(size);
.endfor

    //  Structure of our class
    private ZFrame routingId;           // Routing_id from ROUTER, if any
    private int id;                     //  $(ClassName) message ID
    private ByteBuffer needle;          //  Read/write pointer for serialization

.for class.field
.   if type = "number"
.       if size = 1
.           field.ctype = "int"
.       elsif size = 2
.           field.ctype = "int"
.       elsif size = 4
.           field.ctype = "long"
.       elsif size = 8
.           field.ctype = "long"
.       else
.           echo "E: bad size $(size) for $(name)"
.       endif
    private $(ctype) $(name);
.   elsif type = "octets"
    private byte [] $(name) = new byte [$(size)];
.   elsif type = "number"
    private long $(name);
.   elsif type = "string" | type = "longstr"
    private String $(name);
.   elsif type = "strings"
    private List <String> $(name);
.   elsif type = "hash"
    private Map <String, String> $(name);
    private int $(name)Bytes;
.   elsif type = "frame" | type = "msg"
    private Z$(Type) $(name);
.   elsif type = "uuid"
    private UUID $(name);
.   elsif type = "chunk"
    private byte[] $(name);
.   endif
.endfor

    public $(ClassName)( int id )
    {
        this.id = id;
    }

    public void destroy()
    {
        close();
    }

    @Override
    public void close()
    {
        //  Destroy frame fields
.for field where type = "frame"
        if ($(field.name) != null)
            $(field.name).destroy();
        $(field.name) = null;
.endfor
    }
    //  --------------------------------------------------------------------------
    //  Network data encoding macros


    //  Put a 1-byte number to the frame
    private final void putNumber1 (int value)
    {
        needle.put ((byte) value);
    }

    //  Get a 1-byte number to the frame
    //  then make it unsigned
    private int getNumber1 ()
    {
        int value = needle.get ();
        if (value < 0)
            value = (0xff) & value;
        return value;
    }

    //  Put a 2-byte number to the frame
    private final void putNumber2 (int value)
    {
        needle.putShort ((short) value);
    }

    //  Get a 2-byte number to the frame
    private int getNumber2 ()
    {
        int value = needle.getShort ();
        if (value < 0)
            value = (0xffff) & value;
        return value;
    }

    //  Put a 4-byte number to the frame
    private final void putNumber4 (long value)
    {
        needle.putInt ((int) value);
    }

    //  Get a 4-byte number to the frame
    //  then make it unsigned
    private long getNumber4 ()
    {
        long value = needle.getInt ();
        if (value < 0)
            value = (0xffffffff) & value;
        return value;
    }

    //  Put a 8-byte number to the frame
    public void putNumber8 (long value)
    {
        needle.putLong (value);
    }

    //  Get a 8-byte number to the frame
    public long getNumber8 ()
    {
        return needle.getLong ();
    }


    //  Put a block to the frame
    private void putBlock (byte [] value, int size)
    {
        needle.put (value, 0, size);
    }

    private byte [] getBlock (int size)
    {
        byte [] value = new byte [size];
        needle.get (value);

        return value;
    }

    //  Put a string to the frame
    public void putString (String value)
    {
        needle.put ((byte) value.length ());
        needle.put (value.getBytes());
    }

    //  Get a string from the frame
    public String getString ()
    {
        int size = getNumber1 ();
        byte [] value = new byte [size];
        needle.get (value);

        return new String (value);
    }

        //  Put a string to the frame
    public void putLongString (String value)
    {
        needle.putInt (value.length ());
        needle.put (value.getBytes());
    }

    //  Get a string from the frame
    public String getLongString ()
    {
        long size = getNumber4 ();
        byte [] value = new byte [(int) size];
        needle.get (value);

        return new String (value);
    }
    //  --------------------------------------------------------------------------
    //  Receive and parse a $(ClassName) from the socket. Returns new object or
    //  null if error. Will block if there's no message waiting.

    public static $(ClassName) recv (Socket input)
    {
        assert (input != null);
        $(ClassName) self = new $(ClassName) (0);
        ZFrame frame = null;

        try {
            //  Read valid message frame from socket; we loop over any
            //  garbage data we might receive from badly-connected peers
            while (true) {
                //  If we're reading from a ROUTER socket, get routingId
                if (input.getType () == ZMQ.ROUTER) {
                    self.routingId = ZFrame.recvFrame (input);
                    if (self.routingId == null)
                        return null;         //  Interrupted
                    if (!self.routingId.hasData())
                        return null;         //  Empty Frame (eg recv-timeout)
                    if (!input.hasReceiveMore ())
                        throw new IllegalArgumentException ();
                }
                //  Read and parse command in frame
                frame = ZFrame.recvFrame (input);
                if (frame == null)
                    return null;             //  Interrupted

                //  Get and check protocol signature
                self.needle = ByteBuffer.wrap (frame.getData ());
                int signature = self.getNumber2 ();
                if (signature == (0xAAA0 | $(class.signature)))
                    break;                  //  Valid signature

                //  Protocol assertion, drop message
                while (input.hasReceiveMore ()) {
                    frame.destroy ();
                    frame = ZFrame.recvFrame (input);
                }
                frame.destroy ();
            }

            //  Get message id, which is first byte in frame
            self.id = self.getNumber1 ();
            int listSize;
            int hashSize;

            switch (self.id) {
.for class.message
            case $(MESSAGE.NAME):
              {
.   for field
.       if type = "number"
                self.$(name) = self.getNumber$(size) ();
.               if defined (field.value)
                if (self.$(name) != $(field.value:))
                    throw new IllegalArgumentException ();
.               endif
.       elsif type = "octets"
                self.$(name) = self.getBlock ($(size));
.           if defined (field.value)
                if (self.$(name) != $(field.value:))
                    throw new IllegalArgumentException ();
.           endif
.       elsif type = "string"
                self.$(name) = self.getString ();
.           if defined (field.value)
                if (!self.$(name).equals( "$(field.value:)"))
                    throw new IllegalArgumentException ();
.           endif
.       elsif type = "longstr"
                self.$(name) = self.getLongString ();
.           if defined (field.value)
                if (!self.$(name).equals( "$(field.value:)"))
                    throw new IllegalArgumentException ();
.           endif
.       elsif type = "strings"
                listSize = (int) self.getNumber4 ();
                self.$(name) = new ArrayList<String> ();
                while (listSize-- > 0) {
                    String string = self.getLongString ();
                    self.$(name).add (string);
                }
.       elsif type = "hash"
                hashSize = (int) self.getNumber4 ();
                self.$(name) = new HashMap <String, String> ();
                while (hashSize-- > 0) {
                    String key = self.getString ();
                    String value = self.getLongString ();

                    self.$(name).put(key, value);
                }
.       elsif type = "chunk"
                self.$(name) = self.getBlock((int) self.getNumber4());
.       elsif type = "uuid"
                ByteBuffer bb$(Name) = ByteBuffer.wrap(self.getBlock(16));
                self.$(name) = new UUID(bb$(Name).getLong(), bb$(Name).getLong());
.       elsif type = "frame"
                //  Get next frame, leave current untouched
                if (!input.hasReceiveMore ())
                    throw new IllegalArgumentException ();
                self.$(name) = ZFrame.recvFrame (input);
.       elsif type = "msg"
                self.$(name) = new ZMsg();
                if (input.hasReceiveMore ())
                    self.$(name).add(ZFrame.recvFrame (input));
.       endif
.    endfor
                break;
              }

.endfor
            default:
                throw new IllegalArgumentException ();
            }

            return self;

        } catch (Exception e) {
            //  Error returns
            System.out.printf ("E: malformed message '%d'\\n", self.id);
            self.destroy ();
            return null;
        } finally {
            if (frame != null)
                frame.destroy ();
        }
    }

    //  --------------------------------------------------------------------------
    //  Send the $(ClassName) to the socket, and destroy it

    public boolean send (Socket socket)
    {
        assert (socket != null);

        ZMsg msg = new ZMsg();
        //  If we're sending to a ROUTER, send the routingId first
        if (socket.getType () == ZMQ.ROUTER) {
            msg.add (routingId);
        }

        int frameSize = 2 + 1;          //  Signature and message ID
        switch (id) {
.for class.message
        case $(MESSAGE.NAME):
.   for field
.       if type = "number"
            //  $(name) is a $(size)-byte integer
            frameSize += $(size);
.       elsif type = "octets"
            //  $(name) is a block of $(size) bytes
            frameSize += $(size);
.       elsif type = "string"
            //  $(name) is a string with 1-byte length
.           if defined (field.value)
            frameSize += 1 + "$(field.value:)".length();
.           else
            frameSize ++;
            frameSize += ($(name) != null) ? $(name).length() : 0;
.           endif
.       elsif type = "longstr"
            //  $(name) is a long string with 4-byte length
            frameSize += 4;
            frameSize += ($(name) != null) ? $(name).length() : 0;
.       elsif type = "strings"
            //  $(name) is an array of strings
            frameSize += 4;
            if ($(name) != null) {
                for (String value : $(name)) {
                    frameSize += 4;
                    frameSize += value.length ();
                }
            }
.       elsif type = "hash"
            //  $(name) is an array of key=value strings
            frameSize += 4;
            if ($(name) != null) {
                $(name)Bytes = 0;
                for (Map.Entry <String, String> entry: $(name).entrySet ()) {
                    $(name)Bytes += 1 + entry.getKey().length();
                    $(name)Bytes += 4 + entry.getValue().length();
                }
                frameSize += $(name)Bytes;
            }
.       elsif type = "chunk"
            //  $(name) is a chunk with 4-byte length
            frameSize += 4;
            frameSize += ($(name) != null) ? $(name).length : 0;
.       elsif type = "uuid"
            //  $(name) is uuid with 16-byte length
            frameSize += 16;
.       endif
.   endfor
            break;

.endfor
        default:
            System.out.printf ("E: bad message type '%d', not sent\\n", id);
            assert (false);
        }
        //  Now serialize message into the frame
        ZFrame frame = new ZFrame (new byte [frameSize]);
        needle = ByteBuffer.wrap (frame.getData ());
        int frameFlags = 0;
        putNumber2 (0xAAA0 | $(class.signature));
        putNumber1 ((byte) id);

        switch (id) {
.for class.message
        case $(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            putNumber$(size) ($(field.value:));
.           else
            putNumber$(size) ($(name));
.           endif
.       elsif type = "octets"
            putBlock ($(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            putString ("$(field.value:)");
.           else
            if ($(name) != null)
                putString ($(name));
            else
                putNumber1 ((byte) 0);      //  Empty string
.           endif
.       elsif type = "longstr"
.           if defined (field.value)
            putLongString ("$(field.value:)");
.           else
            if ($(name) != null)
                putLongString ($(name));
            else
                putNumber4 (0);      //  Empty string
.           endif
.       elsif type = "strings"
            if ($(name) != null) {
                putNumber4 ($(name).size ());
                for (String value : $(name)) {
                    putLongString (value);
                }
            }
            else
                putNumber4 (0);      //  Empty string array
.       elsif type = "hash"
            if ($(name) != null) {
                putNumber4 ($(name).size ());
                for (Map.Entry <String, String> entry: $(name).entrySet ()) {
                    putString(entry.getKey());
                    putLongString(entry.getValue());
                }
            }
            else
                putNumber4 (0);      //  Empty hash
.       elsif type = "chunk"
              if($(name) != null) {
                  putNumber4($(name).length);
                  needle.put($(name), 0, $(name).length);
              } else {
                  putNumber4(0);
              }
.       elsif type = "uuid"
              if($(name) != null) {
                  ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
                  bb.putLong($(name).getMostSignificantBits());
                  bb.putLong($(name).getLeastSignificantBits());
                  needle.put(bb.array());
              } else {
                  needle.put(new byte[16]);    //  Empty Chunk
              }
.       endif
.   endfor
            break;

.endfor
        }
        //  Now send the data frame
        msg.add(frame);

        //  Now send any frame fields, in order
        switch (id) {
.for class.message where count (field, type = "frame")
        case $(MESSAGE.NAME):
.   for field where type = "frame"
            //  If $(name) isn't set, send an empty frame
            if ($(field.name) == null)
                $(field.name) = new ZFrame ("".getBytes ());
            msg.add($(field.name));
.   endfor
            break;
.endfor
        }
        switch (id) {
.for class.message where count (field, type = "msg")
        case $(MESSAGE.NAME):
.   for field where type = "msg"
            if( $(field.name) == null )
                $(field.name) = new ZMsg();
            for (ZFrame $(field.name)Part : $(field.name)) {
                msg.add($(field.name)Part);
            }
.   endfor
            break;
.endfor
        }
        //  Destroy $(ClassName) object
        msg.send(socket);
        destroy ();
        return true;
    }


.for message
//  --------------------------------------------------------------------------
//  Send the $(message.NAME) to the socket in one step

    public static void send$(Name) (
        Socket output\
.for field where !defined (value)
,
.   if type = "number"
.       if size = 1
        int $(name)\
.       elsif size = 2
        int $(name)\
.       elsif size = 4
        long $(name)\
.       elsif size = 8
        long $(name)\
.       else
.           echo "E: bad size $(size) for $(name)"
.       endif
.   elsif type = "octets"
        byte [] $(name)\
.   elsif type = "string" | type = "longstr"
        String $(name)\
.   elsif type = "strings"
        List <String> $(name)\
.   elsif type = "hash"
        Map <String, String> $(name)\
.   elsif type = "frame" | type = "msg"
        Z$(Type) $(name)\
.   elsif type = "uuid"
        UUID $(name)\
.   elsif type = "chunk"
        byte[] $(name)\
.   else
        $(type) $(name)\
.   endif
.endfor
)
    {
	send$(Name) (
		    output,
		    null\
.              for field where !defined (value)
,
		    $(name)\
.              endfor
);
    }

//  --------------------------------------------------------------------------
//  Send the $(message.NAME) to a router socket in one step

    public static void send$(Name) (
        Socket output,
	ZFrame routingId\
.for field where !defined (value)
,
.   if type = "number"
.       if size = 1
        int $(name)\
.       elsif size = 2
        int $(name)\
.       elsif size = 4
        long $(name)\
.       elsif size = 8
        long $(name)\
.       else
.           echo "E: bad size $(size) for $(name)"
.       endif
.   elsif type = "octets"
        byte [] $(name)\
.   elsif type = "string" | type = "longstr"
        String $(name)\
.   elsif type = "strings"
        List <String> $(name)\
.   elsif type = "hash"
        Map <String, String> $(name)\
.   elsif type = "frame" | type = "msg"
        Z$(Type) $(name)\
.   elsif type = "uuid"
        UUID $(name)\
.   elsif type = "chunk"
        byte[] $(name)\
.   else
        $(type) $(name)\
.   endif
.endfor
)
    {
        $(ClassName) self = new $(ClassName) ($(ClassName).$(MESSAGE.NAME));
        if (routingId != null)
        {
	        self.setRoutingId (routingId);
        }
.for field where !defined (value)
.   if type = "number" | type = "octets" | type = "string" | type = "longstr" | type = "uuid" | type = "chunk"
        self.set$(Name) ($(name));
.   elsif type = "strings"
        self.set$(Name) (new ArrayList <String> ($(name)));
.   elsif type = "hash"
        self.set$(Name) (new HashMap <String, String> ($(name)));
.   elsif type = "frame" | type = "msg"
        self.set$(Name) ($(name).duplicate ());
.   endif
.endfor
        self.send (output);
    }

.endfor

    //  --------------------------------------------------------------------------
    //  Duplicate the $(ClassName) message

    public $(ClassName) dup ()
    {
        $(ClassName) copy = new $(ClassName) (this.id);
        if (this.routingId != null)
            copy.routingId = this.routingId.duplicate ();
        switch (this.id) {
.for class.message
        case $(MESSAGE.NAME):
.   for field
.       if type = "number"
            copy.$(name) = this.$(name);
.       elsif type = "octets"
            System.arraycopy (copy.$(name), 0, this.$(name), 0, $(size));
.       elsif type = "string" | type = "longstr" | type = "chunk"
            copy.$(name) = this.$(name);
.       elsif type = "strings"
            copy.$(name) = new ArrayList <String> (this.$(name));
.       elsif type = "hash"
            copy.$(name) = new HashMap <String, String> (this.$(name));
.       elsif type = "frame"
            copy.$(name) = this.$(name).duplicate ();
.       endif
.   endfor
        break;
.endfor
        }
        return copy;
    }

.for class.field where type = "hash"
    //  Dump $(name) key=value pair to stdout
    public static void $(name)Dump (Map.Entry <String, String> entry, $(ClassName) self)
    {
        System.out.printf ("        %s=%s\\n", entry.getKey (), entry.getValue ());
    }

.endfor

    //  --------------------------------------------------------------------------
    //  Print contents of message to stdout

    public void dump ()
    {
        switch (id) {
.for class.message
        case $(MESSAGE.NAME):
            System.out.println ("$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            System.out.printf ("    $(name)=$(field.value)\\n");
.           else
            System.out.printf ("    $(name)=%d\\n", (long)$(name));
.           endif
.       elsif type = "octets"
            System.out.printf ("    $(name)=");
            int $(name)Index;
            for ($(name)Index = 0; $(name)Index < $(size); $(name)Index++) {
                if ($(name)Index != 0 && ($(name)Index % 4 == 0))
                    System.out.printf ("-");
                System.out.printf ("%02X", $(name) [$(name)Index]);
            }
            System.out.println();
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            System.out.printf ("    $(name)=$(field.value)\\n");
.           else
            if ($(name) != null)
                System.out.printf ("    $(name)='%s'\\n", $(name));
            else
                System.out.printf ("    $(name)=\\n");
.           endif
.       elsif type = "strings"
            System.out.printf ("    $(name)={");
            if ($(name) != null) {
                for (String value : $(name)) {
                    System.out.printf (" '%s'", value);
                }
            }
            System.out.printf (" }\\n");
.       elsif type = "hash"
            System.out.printf ("    $(name)={\\n");
            if ($(name) != null) {
                for (Map.Entry <String, String> entry : $(name).entrySet ())
                    $(name)Dump (entry, this);
            }
            System.out.printf ("    }\\n");
.       elsif type = "frame"
            System.out.printf ("    $(name)={\\n");
            if ($(name) != null) {
                int size = $(name).size ();
                byte [] data = $(name).getData ();
                System.out.printf ("        size=%d\\n", $(name).size ());
                if (size > 32)
                    size = 32;
                int $(name)Index;
                for ($(name)Index = 0; $(name)Index < size; $(name)Index++) {
                    if ($(name)Index != 0 && ($(name)Index % 4 == 0))
                        System.out.printf ("-");
                    System.out.printf ("%02X", data [$(name)Index]);
                }
            }
            System.out.printf ("    }\\n");
.       endif
.   endfor
            break;

.endfor
        }
    }


    //  --------------------------------------------------------------------------
    //  Get/set the message routing id

    public ZFrame routingId ()
    {
        return routingId;
    }

    public void setRoutingId (ZFrame routingId)
    {
        if (this.routingId != null)
            this.routingId.destroy ();
        this.routingId = routingId.duplicate ();
    }


    //  --------------------------------------------------------------------------
    //  Get/set the $(class.name) id

    public int id ()
    {
        return id;
    }

    public void setId (int id)
    {
        this.id = id;
    }

.for class.field where !defined (value)
.   if type = "number"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public $(ctype) $(name) ()
    {
        return $(name);
    }

    public void set$(Name) ($(ctype) $(name))
    {
        this.$(name) = $(name);
    }

.   elsif type = "octets"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public byte [] $(name) ()
    {
        return $(name);
    }

    public void set$(Name) (byte [] $(name))
    {
        System.arraycopy ($(name), 0, this.$(name), 0, $(size));
    }

.   elsif type = "string" | type = "longstr"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public String $(name) ()
    {
        return $(name);
    }

    public void set$(Name) (String format, Object ... args)
    {
        //  Format into newly allocated string
        $(name) = String.format (format, args);
    }

.   elsif type = "strings"
    //  --------------------------------------------------------------------------
    //  Iterate through the $(name) field, and append a $(name) value

    public List <String> $(name) ()
    {
        return $(name);
    }

    public void append$(Name) (String format, Object ... args)
    {
        //  Format into newly allocated string

        String string = String.format (format, args);
        //  Attach string to list
        if ($(name) == null)
            $(name) = new ArrayList <String> ();
        $(name).add (string);
    }

    public void set$(Name) (List <String> value)
    {
        $(name) = new ArrayList (value);
    }

.   elsif type = "hash"
    //  --------------------------------------------------------------------------
    //  Get/set a value in the $(name) hash

    public Map <String, String> $(name) ()
    {
        return $(name);
    }

    public String $(name)String (String key, String defaultValue)
    {
        String value = null;
        if ($(name) != null)
            value = $(name).get (key);
        if (value == null)
            value = defaultValue;

        return value;
    }

    public long $(name)Number (String key, long defaultValue)
    {
        long value = defaultValue;
        String string = null;
        if ($(name) != null)
            string = $(name).get (key);
        if (string != null)
            value = Long.valueOf (string);

        return value;
    }

    public void insert$(Name) (String key, String format, Object ... args)
    {
        //  Format string into buffer
        String string = String.format (format, args);

        //  Store string in hash table
        if ($(name) == null)
            $(name) = new HashMap <String, String> ();
        $(name).put (key, string);
        $(name)Bytes += key.length () + 1 + string.length ();
    }

    public void set$(Name) (Map <String, String> value)
    {
        if (value != null)
            $(name) = new HashMap <String, String> (value);
        else
            $(name) = value;
    }

.   elsif type = "frame" | type = "msg"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public Z$(Type) $(name) ()
    {
        return $(name);
    }

    //  Takes ownership of supplied frame
    public void set$(Name) (Z$(Type) frame)
    {
        if ($(name) != null)
            $(name).destroy ();
        $(name) = frame;
    }
.   elsif type = "uuid"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public UUID $(name) ()
    {
        return $(name);
    }

    public void set$(Name) (UUID $(name))
    {
        this.$(name) = $(name);
    }
.   elsif type = "chunk"
    //  --------------------------------------------------------------------------
    //  Get/set the $(name) field

    public byte[] $(name) ()
    {
        return $(name);
    }

    //  Takes ownership of supplied frame
    public void set$(Name) (byte[] $(name))
    {
        this.$(name) = $(name);
    }
.   endif
.endfor
}
.directory.create ("$(topdir)/test/java/$(name_path)")
.output "$(topdir)/test/java/$(name_path)/Test$(ClassName).java"
package $(namespace);

import static org.junit.Assert.*;
import org.junit.Test;
import org.zeromq.ZMQ;
import org.zeromq.ZMQ.Socket;
import org.zeromq.ZFrame;
import org.zeromq.ZContext;

public class Test$(ClassName)
{
    @Test
    public void test$(ClassName) ()
    {
        System.out.printf (" * $(class.name): ");

        //  Simple create/destroy test
        $(ClassName) self = new $(ClassName) (0);
        assert (self != null);
        self.destroy ();

        //  Create pair of sockets we can send through
        ZContext ctx = new ZContext ();
        assert (ctx != null);

        Socket output = ctx.createSocket (ZMQ.DEALER);
        assert (output != null);
        output.bind ("inproc://selftest");
        Socket input = ctx.createSocket (ZMQ.ROUTER);
        assert (input != null);
        input.connect ("inproc://selftest");

        //  Encode/send/decode and verify each message type
.for class.message

        self = new $(ClassName) ($(ClassName).$(MESSAGE.NAME));
.   for field where !defined (value)
.       if type = "number"
        self.set$(Name) ((byte) 123);
.       elsif type = "octets"
        byte [] $(name)Data = new byte [$(ClassName).$(FIELD.NAME)_SIZE];
        for (int i=0; i < $(ClassName).$(FIELD.NAME)_SIZE; i++)
            $(name)Data [i] = 123;
        self.set$(Name) ($(name)Data);
.       elsif type = "string" | type = "longstr"
        self.set$(Name) ("Life is short but Now lasts for ever");
.       elsif type = "strings"
        self.append$(Name) ("Name: %s", "Brutus");
        self.append$(Name) ("Age: %d", 43);
.       elsif type = "hash"
        self.insert$(Name) ("Name", "Brutus");
        self.insert$(Name) ("Age", "%d", 43);
.       elsif type = "chunk"
        self.set$(Name) ("Captcha Diem".getBytes());
.       elsif type = "frame"
        self.set$(Name) (new ZFrame ("Captcha Diem"));
.       endif
.   endfor
        self.send (output);

        self = $(ClassName).recv (input);
        assert (self != null);
.   for field where !defined (value)
.       if type = "number"
        assertEquals (self.$(name) (), 123);
.       elsif type = "octets"
        assertEquals (self.$(name) () [0], 123);
        assertEquals (self.$(name) () [$(ClassName).$(FIELD.NAME)_SIZE - 1], 123);
.       elsif type = "string" | type = "longstr"
        assertEquals (self.$(name) (), "Life is short but Now lasts for ever");
.       elsif type = "strings"
        assertEquals (self.$(name) ().size (), 2);
        assertEquals (self.$(name) ().get (0), "Name: Brutus");
        assertEquals (self.$(name) ().get (1), "Age: 43");
.       elsif type = "hash"
        assertEquals (self.$(name) ().size (), 2);
        assertEquals (self.$(name)String ("Name", "?"), "Brutus");
        assertEquals (self.$(name)Number ("Age", 0), 43);
.       elsif type = "chunk"
        assertTrue (java.util.Arrays.equals("Captcha Diem".getBytes(), self.$(name) ()));
.       elsif type = "frame"
        assertTrue (self.$(name) ().streq ("Captcha Diem"));
.       endif
.   endfor
        self.destroy ();
.endfor

        ctx.destroy ();
        System.out.printf ("OK\\n");
    }
}
