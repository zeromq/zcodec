.template 0
#   zproto_codec_c_v2.gsl
#
#   Generates a codec for a protocol specification. This has the following
#   changes over the v1 codec:
#
#   - uses the low-level zmq API for sending/receiving messages, instead
#     of CZMQ, to reduce heap usage.
#   - short strings are allocated together with the message object, as
#     char [256] arrays.
#   - the class API is simpler, without methods to work with hash and list
#     contents.
#   - sending is non-destructive. The goal is to reuse the object for many
#     recvs and sends, and thus reduce heap allocations.
#
#   Note that the API is NOT compatible with v1.
#
include "zproto_lib.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate
.output "$(class.package_dir)/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)
    
    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(CLASS.NAME)_H_INCLUDED
#define $(CLASS.NAME)_H_INCLUDED

/*  These are the $(class.name) messages:
.for message

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
        $(name)             $(type) $(size)\
                                        $(field.?'':)
.       elsif type = "octets"
        $(name)             $(type) [$(size)]\
                                        $(field.?'':)
.       else
        $(name)             $(type)     $(field.?'':)
.       endif
.   endfor
.endfor
*/

.for define
#define $(CLASS.NAME)_$(DEFINE.NAME:C)      $(value:)
.endfor

.for message
#define $(CLASS.NAME)_$(MESSAGE.NAME)       $(id)
.endfor
.for class.field where type = "octets"
#define $(CLASS.NAME)_$(FIELD.NAME)_SIZE    $(size)
.endfor

.if file.exists ("../include/czmq.h")
#include "czmq.h"
.else
#include <czmq.h>
.endif

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
#ifndef $(CLASS.NAME)_T_DEFINED
typedef struct _$(class.name)_t $(class.name)_t;
#define $(CLASS.NAME)_T_DEFINED
#endif

//  @interface
//  Create a new empty $(class.name)
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_new (void);

//  Destroy a $(class.name) instance
$(CLASS.EXPORT_MACRO)void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Receive a $(class.name) from the socket. Returns 0 if OK, -1 if
//  there was an error. Blocks if there is no message waiting.
$(CLASS.EXPORT_MACRO)int
    $(class.name)_recv ($(class.name)_t *self, zsock_t *input);

//  Send the $(class.name) to the output socket, does not destroy it
$(CLASS.EXPORT_MACRO)int
    $(class.name)_send ($(class.name)_t *self, zsock_t *output);
    
//  Print contents of message to stdout
$(CLASS.EXPORT_MACRO)void
    $(class.name)_print ($(class.name)_t *self);

//  Get/set the message routing id
$(CLASS.EXPORT_MACRO)zframe_t *
    $(class.name)_routing_id ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id);

//  Get the $(class.name) id and printable command
$(CLASS.EXPORT_MACRO)int
    $(class.name)_id ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_id ($(class.name)_t *self, int id);
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_command ($(class.name)_t *self);

.for class.field where !defined (value)
.   if type = "number"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)$(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name));
.#
.   elsif type = "octets"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)byte *
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name));
.#
.   elsif type = "string" | type = "longstr"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, const char *value);
.#
.   elsif type = "strings"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)zlist_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)zlist_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p);
.#
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
//  Get a copy of the $(name) field
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
$(CLASS.EXPORT_MACRO)int
    $(class.name)_test (bool verbose);
//  @end

//  For backwards compatibility with old codecs
#define $(class.name)_dump  $(class.name)_print

#ifdef __cplusplus
}
#endif

#endif
.output "$(class.source_dir)/$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec class for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.title:)
@discuss
@end
*/

.if defined (class.project_header)
#include "$(class.project_header)"
.endif
#include "$(class.package_dir)/$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    zframe_t *routing_id;               //  Routing_id from ROUTER, if any
    int id;                             //  $(class.name) message ID
    byte *needle;                       //  Read/write pointer for serialization
    byte *ceiling;                      //  Valid upper limit for read pointer
.for class.field
.   if type = "number" & !defined (field.value)
    /* $(field.?'':)  */
    $(ctype) $(name);
.   elsif type = "octets"
    /* $(field.?'':)  */
    byte $(name) [$(size)];
.   elsif type = "string" & !defined (field.value)
    /* $(field.?'':)  */
    char $(name) [256];
.   elsif type = "longstr"
    /* $(field.?'':)  */
    char *$(name);
.   elsif type = "strings"
    /* $(field.?'':)  */
    zlist_t *$(name);
.   elsif type = "hash"
    /* $(field.?'':)  */
    zhash_t *$(name);
    size_t $(name)_bytes;               //  Size of hash content
.   elsif type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
    /* $(field.?'':)  */
    z$(type)_t *$(name);
.   endif
.endfor
};

//  --------------------------------------------------------------------------
//  Network data encoding macros

//  Put a block of octets to the frame
#define PUT_OCTETS(host,size) { \\
    memcpy (self->needle, (host), size); \\
    self->needle += size; \\
}

//  Get a block of octets from the frame
#define GET_OCTETS(host,size) { \\
    if (self->needle + size > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_OCTETS failed"); \\
        goto malformed; \\
    } \\
    memcpy ((host), self->needle, size); \\
    self->needle += size; \\
}

//  Put a 1-byte number to the frame
#define PUT_NUMBER1(host) { \\
    *(byte *) self->needle = (host); \\
    self->needle++; \\
}

//  Put a 2-byte number to the frame
#define PUT_NUMBER2(host) { \\
    self->needle [0] = (byte) (((host) >> 8)  & 255); \\
    self->needle [1] = (byte) (((host))       & 255); \\
    self->needle += 2; \\
}

//  Put a 4-byte number to the frame
#define PUT_NUMBER4(host) { \\
    self->needle [0] = (byte) (((host) >> 24) & 255); \\
    self->needle [1] = (byte) (((host) >> 16) & 255); \\
    self->needle [2] = (byte) (((host) >> 8)  & 255); \\
    self->needle [3] = (byte) (((host))       & 255); \\
    self->needle += 4; \\
}

//  Put a 8-byte number to the frame
#define PUT_NUMBER8(host) { \\
    self->needle [0] = (byte) (((host) >> 56) & 255); \\
    self->needle [1] = (byte) (((host) >> 48) & 255); \\
    self->needle [2] = (byte) (((host) >> 40) & 255); \\
    self->needle [3] = (byte) (((host) >> 32) & 255); \\
    self->needle [4] = (byte) (((host) >> 24) & 255); \\
    self->needle [5] = (byte) (((host) >> 16) & 255); \\
    self->needle [6] = (byte) (((host) >> 8)  & 255); \\
    self->needle [7] = (byte) (((host))       & 255); \\
    self->needle += 8; \\
}

//  Get a 1-byte number from the frame
#define GET_NUMBER1(host) { \\
    if (self->needle + 1 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER1 failed"); \\
        goto malformed; \\
    } \\
    (host) = *(byte *) self->needle; \\
    self->needle++; \\
}

//  Get a 2-byte number from the frame
#define GET_NUMBER2(host) { \\
    if (self->needle + 2 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER2 failed"); \\
        goto malformed; \\
    } \\
    (host) = ((uint16_t) (self->needle [0]) << 8) \\
           +  (uint16_t) (self->needle [1]); \\
    self->needle += 2; \\
}

//  Get a 4-byte number from the frame
#define GET_NUMBER4(host) { \\
    if (self->needle + 4 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER4 failed"); \\
        goto malformed; \\
    } \\
    (host) = ((uint32_t) (self->needle [0]) << 24) \\
           + ((uint32_t) (self->needle [1]) << 16) \\
           + ((uint32_t) (self->needle [2]) << 8) \\
           +  (uint32_t) (self->needle [3]); \\
    self->needle += 4; \\
}

//  Get a 8-byte number from the frame
#define GET_NUMBER8(host) { \\
    if (self->needle + 8 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER8 failed"); \\
        goto malformed; \\
    } \\
    (host) = ((uint64_t) (self->needle [0]) << 56) \\
           + ((uint64_t) (self->needle [1]) << 48) \\
           + ((uint64_t) (self->needle [2]) << 40) \\
           + ((uint64_t) (self->needle [3]) << 32) \\
           + ((uint64_t) (self->needle [4]) << 24) \\
           + ((uint64_t) (self->needle [5]) << 16) \\
           + ((uint64_t) (self->needle [6]) << 8) \\
           +  (uint64_t) (self->needle [7]); \\
    self->needle += 8; \\
}

//  Put a string to the frame
#define PUT_STRING(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER1 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a string from the frame
#define GET_STRING(host) { \\
    size_t string_size; \\
    GET_NUMBER1 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) { \\
        zsys_warning ("$(class.name): GET_STRING failed"); \\
        goto malformed; \\
    } \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  Put a long string to the frame
#define PUT_LONGSTR(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER4 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a long string from the frame
#define GET_LONGSTR(host) { \\
    size_t string_size; \\
    GET_NUMBER4 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) { \\
        zsys_warning ("$(class.name): GET_LONGSTR failed"); \\
        goto malformed; \\
    } \\
    free ((host)); \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}


//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new (void)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
        zframe_destroy (&self->routing_id);
.for class.field
.   if type = "longstr"
        free (self->$(name));
.   elsif type = "strings"
        if (self->$(name))
            zlist_destroy (&self->$(name));
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
        z$(type)_destroy (&self->$(name));
.   endif
.endfor

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Decode a $(class.name) from the input size of specified size.
//  Reads additional from the buffer if frames=true. Returns 0 if OK, -1 if there
//  was an error.

int
$(class.name)_decode ($(class.name)_t *self, byte *input, size_t size, bool frames)
{
    assert (self);
    assert (input);

    //  Get and check protocol signature
    self->needle = input;
    self->ceiling = self->needle + size;

    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature))) {
        zsys_warning ("$(class.name): invalid signature");
        //  TODO: discard invalid messages and loop, and return
        //  -1 only on interrupt
        goto malformed;         //  Interrupted
    }
    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            {
                $(ctype) $(name);
                GET_NUMBER$(size) ($(name));
                if ($(name) != $(value:)) {
                    zsys_warning ("$(class.name): $(name) is invalid");
                    goto malformed;
                }
            }
.           else
            GET_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            GET_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            {
                char $(name) [256];
                GET_STRING ($(name));
                if (strneq ($(name), "$(value:)")) {
                    zsys_warning ("$(class.name): $(name) is invalid");
                    goto malformed;
                }
            }
.           else
            GET_STRING (self->$(name));
.           endif
.       elsif type = "longstr"
            GET_LONGSTR (self->$(name));
.       elsif type = "strings"
            {
                size_t list_size;
                GET_NUMBER4 (list_size);
                self->$(name) = zlist_new ();
                zlist_autofree (self->$(name));
                while (list_size--) {
                    char *string = NULL;
                    GET_LONGSTR (string);
                    zlist_append (self->$(name), string);
                    free (string);
                }
            }
.       elsif type = "hash"
            {
                size_t hash_size;
                GET_NUMBER4 (hash_size);
                self->$(name) = zhash_new ();
                zhash_autofree (self->$(name));
                while (hash_size--) {
                    char key [256];
                    char *value = NULL;
                    GET_STRING (key);
                    GET_LONGSTR (value);
                    zhash_insert (self->$(name), key, value);
                    free (value);
                }
            }
.       elsif type = "chunk"
            {
                size_t chunk_size;
                GET_NUMBER4 (chunk_size);
                if (self->needle + chunk_size > (self->ceiling)) {
                    zsys_warning ("$(class.name): $(name) is missing data");
                    goto malformed;
                }
                zchunk_destroy (&self->$(name));
                self->$(name) = zchunk_new (self->needle, chunk_size);
                self->needle += chunk_size;
            }
.       elsif type = "uuid"
            if (self->needle + ZUUID_LEN > (self->ceiling)) {
                zsys_warning ("$(class.name): $(name) is invalid");
                goto malformed;
            }
            zuuid_destroy (&self->$(name));
            self->$(name) = zuuid_new ();
            zuuid_set (self->$(name), self->needle);
            self->needle += ZUUID_LEN;
.       elsif type = "frame"
            //  Get next frame off buffer
            if (frames) {
                size_t frame_size;
                GET_NUMBER4 (frame_size);
                if (self->needle + frame_size > (self->ceiling)) {
                    zsys_warning ("$(class.name): $(name) is missing data");
                    goto malformed;
                }

                zframe_destroy (&self->$(name));
                self->$(name) = zframe_new (self->needle, frame_size);
                self->needle += frame_size;
            }
.       elsif type = "msg"
            //  Get zero or more remaining frames
            if (frames) {
                size_t zmsg_size = 0;
                GET_NUMBER4 (zmsg_size);
                if (self->needle + zmsg_size > (self->ceiling)) {
                    zsys_warning ("$(class.name): $(name) is missing data");
                    goto malformed;
                }

                size_t zmsg_frame_size;
                zmsg_destroy (&self->$(name));
                self->$(name) = zmsg_new ();

                while (zmsg_size-- > 0) {
                    GET_NUMBER4 (zmsg_frame_size);

                    zmsg_addmem (self->$(name), self->needle, zmsg_frame_size);
                    self->needle += zmsg_frame_size;
                }
            }
.       endif
.   endfor
            break;

.endfor
        default:
            zsys_warning ("$(class.name): bad message ID");
            goto malformed;
    }

    //  Successful return
    return 0;

    //  Error returns
    malformed:
        zsys_warning ("$(class.name): $(name) malformed message, fail");
        return -1;              //  Invalid message
}


//  --------------------------------------------------------------------------
//  Receive a $(class.name) from the socket. Returns 0 if OK, -1 if
//  there was an error. Blocks if there is no message waiting.

int
$(class.name)_recv ($(class.name)_t *self, zsock_t *input)
{
    assert (self);
    assert (input);

    if (zsock_type (input) == ZMQ_ROUTER) {
        zframe_destroy (&self->routing_id);
        self->routing_id = zframe_recv (input);
        if (!self->routing_id || !zsock_rcvmore (input)) {
            zsys_warning ("$(class.name): no routing ID");
            return -1;          //  Interrupted or malformed
        }
    }
    zmq_msg_t frame;
    zmq_msg_init (&frame);
    int size = zmq_msg_recv (&frame, zsock_resolve (input), 0);
    if (size == -1) {
        zsys_warning ("$(class.name): interrupted");
        goto malformed;
    }

    int res = $(class.name)_decode (self, (byte *) zmq_msg_data (&frame), zmq_msg_size (&frame), false);
    if (res == -1) {
        goto malformed;
    }

    switch (self->id) {
.for class.message where count (field, type = "msg") | count (field, type = "frame")
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "frame"
            //  Get next frame off socket
            if (!zsock_rcvmore (input)) {
                zsys_warning ("$(class.name): $(name) is missing");
                goto malformed;
            }
            zframe_destroy (&self->$(name));
            self->$(name) = zframe_recv (input);
.       elsif type = "msg"
            //  Get zero or more remaining frames
            zmsg_destroy (&self->$(name));
            if (zsock_rcvmore (input))
                self->$(name) = zmsg_recv (input);
            else
                self->$(name) = zmsg_new ();
.       endif
.   endfor
            break;

.endfor
    }

    //  Successful return
    zmq_msg_close (&frame);
    return 0;

    //  Error returns
    malformed:
        zsys_warning ("$(class.name): $(name) malformed message, fail");
        zmq_msg_close (&frame);
        return -1;              //  Invalid message
}


//  --------------------------------------------------------------------------
//  Return size of the $(class.name).

size_t
$(class.name)_encode_size ($(class.name)_t *self, bool frames)
{
    assert (self);

    size_t size = 2 + 1;          //  Signature and message ID
    switch (self->id) {
.for class.message where count (field)
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            size += $(size);      //  $(name)
.       elsif type = "octets"
            size += $(size);      //  $(name)
.       elsif type = "string"
.           if defined (field.value)
            size += 1 + strlen ("$(value:)");
.           else
            size += 1 + strlen (self->$(name));
.           endif
.       elsif type = "longstr"
            size += 4;
            if (self->$(name))
                size += strlen (self->$(name));
.       elsif type = "strings"
            size += 4;            //  Size is 4 octets
            if (self->$(name)) {
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    size += 4 + strlen ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "hash"
            size += 4;            //  Size is 4 octets
            if (self->$(name)) {
                self->$(name)_bytes = 0;
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    self->$(name)_bytes += 1 + strlen (zhash_cursor (self->$(name)));
                    self->$(name)_bytes += 4 + strlen (item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            size += self->$(name)_bytes;
.       elsif type = "chunk"
            size += 4;            //  Size is 4 octets
            if (self->$(name))
                size += zchunk_size (self->$(name));
.       elsif type = "uuid"
            size += ZUUID_LEN;    //  $(name)
.       elsif type = "frame"
            if (frames) {
                size += 4;        //  Size is 4 octets
                size += zframe_size (self->$(name));
            }
.       elsif type = "msg"
.           class.msg = name
.           if item () <> count (message.field)
.               echo "E: in $(message.name:), $(field.name) must come last"
.           endif
            size += 4;            //  Size is 4 octets
            zframe_t *frame = zmsg_first (self->$(class.msg));
            while (frame) {
                size += 4;        //  Size is 4 octets
                size += zframe_size (frame);
                frame = zmsg_next (self->$(class.msg));
            }
.       endif
.   endfor
            break;
.endfor
    }

    return size;
}


//  --------------------------------------------------------------------------
//  Encode the $(class.name) into the output.

size_t
$(class.name)_encode ($(class.name)_t *self, byte *output, bool frames)
{
    assert (self);
    assert (output);

    self->needle = output;
    PUT_NUMBER2 (0xAAA0 | $(class.signature));
    PUT_NUMBER1 (self->id);

.if defined (class.msg)
    bool encode_$(class.msg) = false;
.endif
    size_t nbr_frames = 1;              //  Total number of frames to send

    switch (self->id) {
.for class.message where count (field)
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(value:)");
.           else
            PUT_STRING (self->$(name));
.           endif
.       elsif type = "longstr"
            if (self->$(name)) {
                PUT_LONGSTR (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty string
.       elsif type = "strings"
            if (self->$(name)) {
                PUT_NUMBER4 (zlist_size (self->$(name)));
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    PUT_LONGSTR ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty string array
.       elsif type = "hash"
            if (self->$(name)) {
                PUT_NUMBER4 (zhash_size (self->$(name)));
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    PUT_STRING (zhash_cursor (self->$(name)));
                    PUT_LONGSTR (item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty hash
.       elsif type = "chunk"
            if (self->$(name)) {
                PUT_NUMBER4 (zchunk_size (self->$(name)));
                memcpy (self->needle,
                        zchunk_data (self->$(name)),
                        zchunk_size (self->$(name)));
                self->needle += zchunk_size (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty chunk
.       elsif type = "uuid"
            if (self->$(name))
                zuuid_export (self->$(name), self->needle);
            else
                memset (self->needle, 0, ZUUID_LEN);
            self->needle += ZUUID_LEN;
.       elsif type = "frame"
            nbr_frames++;
.       elsif type = "msg"
            nbr_frames += self->$(name)? zmsg_size (self->$(name)): 1;
.           if defined (class.msg)
            encode_$(class.msg) = true;
.           endif
.       endif
.   endfor
            break;

.endfor
    }

    if (!frames) {
        return nbr_frames;
    }

.for class.message where count (field, type = "frame")
    //  Now encode any frame fields, in order
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
.   for field where type = "frame"
        //  If $(name) isn't set, encode an empty frame
        if (self->$(field.name)) {
            PUT_NUMBER4 (zframe_size (self->$(name)))
            memcpy (self->needle,
                    (byte *) zframe_data (self->$(name)),
                    zframe_size (self->$(name)));
            self->needle += zframe_size (self->$(name));
        } else
            PUT_NUMBER4 (0)
.   endfor
    }
.endfor
.if defined (class.msg)
    //  Now encode the $(class.msg) if necessary
    if (encode_$(class.msg)) {
        if (self->$(class.msg)) {
            PUT_NUMBER4 (zmsg_size (self->$(class.msg)))
            zframe_t *frame = zmsg_first (self->$(class.msg));
            while (frame) {
                PUT_NUMBER4 (zframe_size (frame))
                memcpy (self->needle,
                        (byte *) zframe_data (frame),
                        zframe_size (frame));
                self->needle += zframe_size (frame);
                frame = zmsg_next (self->$(class.msg));
            }
        }
        else
            PUT_NUMBER4 (0)
    }
.endif

    return nbr_frames;
}


//  --------------------------------------------------------------------------
//  Send the $(class.name) to the socket. Does not destroy it. Returns 0 if
//  OK, else -1.

int
$(class.name)_send ($(class.name)_t *self, zsock_t *output)
{
    assert (self);
    assert (output);

    if (zsock_type (output) == ZMQ_ROUTER)
        zframe_send (&self->routing_id, output, ZFRAME_MORE + ZFRAME_REUSE);

    //  Now serialize message into the frame
    size_t frame_size = $(class.name)_encode_size(self, false);
    zmq_msg_t frame;
    zmq_msg_init_size (&frame, frame_size);

    size_t nbr_frames = $(class.name)_encode (self, (byte *) zmq_msg_data (&frame), false);

    //  Now send the data frame
    zmq_msg_send (&frame, zsock_resolve (output), --nbr_frames? ZMQ_SNDMORE: 0);

.if defined (class.msg)
    bool send_$(class.msg) = false;
.endif

    switch (self->id) {
.for class.message where count (field, type = "msg")
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field where type = "msg"
            send_$(class.msg) = true;
.   endfor
            break;
.endfor
    }

.for class.message where count (field, type = "frame")
    //  Now send any frame fields, in order
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
.   for field where type = "frame"
        //  If $(name) isn't set, send an empty frame
        if (self->$(field.name))
            zframe_send (&self->$(field.name), output, ZFRAME_REUSE + (--nbr_frames? ZFRAME_MORE: 0));
        else
            zmq_send (zsock_resolve (output), NULL, 0, (--nbr_frames? ZMQ_SNDMORE: 0));
.   endfor
    }
.endfor
.if defined (class.msg)
    //  Now send the $(class.msg) if necessary
    if (send_$(class.msg)) {
        if (self->$(class.msg)) {
            zframe_t *frame = zmsg_first (self->$(class.msg));
            while (frame) {
                zframe_send (&frame, output, ZFRAME_REUSE + (--nbr_frames? ZFRAME_MORE: 0));
                frame = zmsg_next (self->$(class.msg));
            }
        }
        else
            zmq_send (zsock_resolve (output), NULL, 0, 0);
    }
.endif
    return 0;
}


//  --------------------------------------------------------------------------
//  Print contents of message to stdout

void
$(class.name)_print ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            zsys_debug ("$(CLASS.NAME)_$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            zsys_debug ("    $(name)=$(field.value)");
.           else
            zsys_debug ("    $(name)=%ld", (long) self->$(name));
.           endif
.       elsif type = "octets"
            zsys_debug ("    $(name)=[ ... ]");
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            zsys_debug ("    $(name)=$(field.value)");
.           else
            if (self->$(name))
                zsys_debug ("    $(name)='%s'", self->$(name));
            else
                zsys_debug ("    $(name)=");
.           endif
.       elsif type = "strings"
            zsys_debug ("    $(name)=");
            if (self->$(name)) {
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    zsys_debug ("        '%s'", $(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "hash"
            zsys_debug ("    $(name)=");
            if (self->$(name)) {
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    zsys_debug ("        %s=%s", zhash_cursor (self->$(name)), item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            else
                zsys_debug ("(NULL)");
.       elsif type = "chunk"
            zsys_debug ("    $(name)=[ ... ]");
.       elsif type = "uuid"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zsys_debug ("        %s", zuuid_str (self->$(name)));
            else
                zsys_debug ("        (NULL)");
.       elsif type = "frame"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zframe_print (self->$(name), NULL);
            else
                zsys_debug ("(NULL)");
.       elsif type = "msg"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zmsg_print (self->$(name));
            else
                zsys_debug ("(NULL)");
.       endif
.   endfor
            break;
            
.endfor
    }
}


//  --------------------------------------------------------------------------
//  Get/set the message routing_id

zframe_t *
$(class.name)_routing_id ($(class.name)_t *self)
{
    assert (self);
    return self->routing_id;
}

void
$(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id)
{
    if (self->routing_id)
        zframe_destroy (&self->routing_id);
    self->routing_id = zframe_dup (routing_id);
}


//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_set_id ($(class.name)_t *self, int id)
{
    self->id = id;
}

//  --------------------------------------------------------------------------
//  Return a printable command string

const char *
$(class.name)_command ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            return ("$(MESSAGE.NAME)");
            break;
.endfor
    }
    return "?";
}

.for class.field where !defined (value)
.   if type = "number"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "octets"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name))
{
    assert (self);
    memcpy (self->$(name), $(name), $(size));
}

.   elsif type = "string"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *value)
{
    assert (self);
    assert (value);
    if (value == self->$(name))
        return;
    strncpy (self->$(name), value, 255);
    self->$(name) [255] = 0;
}

.   elsif type = "longstr"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *value)
{
    assert (self);
    assert (value);
    free (self->$(name));
    self->$(name) = strdup (value);
}

.   elsif type = "strings"
//  --------------------------------------------------------------------------
//  Get the $(name) field, without transferring ownership

zlist_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zlist_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    assert (self);
    zlist_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zlist_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}


.   elsif type = "hash"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

zhash_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zhash_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    zhash_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zhash_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zhash_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}


.   elsif type = "chunk" | type = "uuid" | type = "frame" | type = "msg"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

z$(type)_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

z$(type)_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    z$(type)_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p)
{
    assert (self);
    assert ($(type)_p);
    z$(type)_destroy (&self->$(name));
    self->$(name) = *$(type)_p;
    *$(type)_p = NULL;
}

.   endif

.endfor
//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  Silence an "unused" warning by "using" the verbose variable
    if (verbose) {;}

    //  @selftest
    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new ();
    assert (self);
    $(class.name)_destroy (&self);

    //  Create pair of sockets we can send through
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    zsock_connect (input, "inproc://selftest-$(class.name)");

    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    zsock_bind (output, "inproc://selftest-$(class.name)");

    FILE *fp;

    //  Encode/send/decode and verify each message type
    size_t buf_size;
    byte *buf;
    int instance;
    self = $(class.name)_new ();

.for class.message
    $(class.name)_set_id (self, $(CLASS.NAME)_$(MESSAGE.NAME));

.   for field where !defined (value)
.       if type = "number"
    $(class.name)_set_$(name) (self, 123);
.       elsif type = "octets"
    byte $(name)_data [$(CLASS.NAME)_$(FIELD.NAME)_SIZE];
    memset ($(name)_data, 123, $(CLASS.NAME)_$(FIELD.NAME)_SIZE);
    $(class.name)_set_$(name) (self, $(name)_data);
.       elsif type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, "Life is short but Now lasts for ever");
.       elsif type = "strings"
    zlist_t *$(message.name)_$(name) = zlist_new ();
    zlist_append ($(message.name)_$(name), "Name: Brutus");
    zlist_append ($(message.name)_$(name), "Age: 43");
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "chunk" | type = "frame"
    z$(type)_t *$(message.name)_$(name) = z$(type)_new ("Captcha Diem", 12);
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "uuid"
    zuuid_t *$(message.name)_$(name) = zuuid_new ();
    zuuid_t *$(message.name)_$(name)_dup = zuuid_dup ($(message.name)_$(name));
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "msg"
    zmsg_t *$(message.name)_$(name) = zmsg_new ();
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
    zmsg_addstr ($(class.name)_$(name) (self), "Hello, World");
.       endif
.   endfor
    //  Send twice
    $(class.name)_send (self, output);
    $(class.name)_send (self, output);

    buf_size = $(class.name)_encode_size (self, true);
    buf = (byte *) malloc (buf_size);
    assert (buf);
    $(class.name)_encode (self, buf, true);

    // Save buffer for integration testing with other language implementations.
    if (verbose) {
        fp = fopen ("test-data/$(class.name)_$(name).bin", "w");
        assert(fwrite (buf, 1, buf_size, fp));
        fclose(fp);
    }

    // Receive twice the decode from the buffer
    for (instance = 0; instance < 2+1; instance++) {
        if (instance < 2) {
            $(class.name)_recv (self, input);
        } else {
            $(class.name)_decode (self, buf, buf_size, true);
        }
        assert ($(class.name)_routing_id (self));
.   for field where !defined (value)
.       if type = "number"
        assert ($(class.name)_$(name) (self) == 123);
.       elsif type = "octets"
        assert ($(class.name)_$(name) (self) [0] == 123);
        assert ($(class.name)_$(name) (self) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE - 1] == 123);
.       elsif type = "string" | type = "longstr"
        assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.       elsif type = "strings"
        zlist_t *$(name) = $(class.name)_get_$(name) (self);
        assert (zlist_size ($(name)) == 2);
        assert (streq ((char *) zlist_first ($(name)), "Name: Brutus"));
        assert (streq ((char *) zlist_next ($(name)), "Age: 43"));
        zlist_destroy (&$(name));
.       elsif type = "chunk"
        assert (memcmp (zchunk_data ($(class.name)_$(name) (self)), "Captcha Diem", 12) == 0);
.       elsif type = "frame"
        assert (zframe_streq ($(class.name)_$(name) (self), "Captcha Diem"));
.       elsif type = "msg"
        assert (zmsg_size ($(class.name)_$(name) (self)) == 1);
.       elsif type = "uuid"
        zuuid_t *acutal_$(name) = $(class.name)_$(name) (self);
        assert (zuuid_eq ($(message.name)_$(name)_dup, zuuid_data (acutal_$(name))));
        if (instance == 2) {
            zuuid_destroy (&$(message.name)_$(name)_dup);
        }
.       endif
.   endfor
    }

    free (buf);

.endfor

    $(class.name)_destroy (&self);
    zsock_destroy (&input);
    zsock_destroy (&output);
    //  @end

    printf ("OK\\n");
    return 0;
}
