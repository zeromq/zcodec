.template 0
#
#   Generates a codec for a protocol specification.
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
#   This has the following changes over the v1 codec:
#
#   - uses the low-level zmq API for sending/receiving messages, instead
#     of CZMQ, to reduce heap usage.
#   - short strings are allocated together with the message object, as
#     char [256] arrays.
#   - the class API is simpler, without methods to work with hash and list
#     contents.
#   - sending is non-destructive. The goal is to reuse the object for many
#     recvs and sends, and thus reduce heap allocations.
#   - class.virtual makes send/recv work with zmsg_t instead of sockets.
#
#   Note that the API is NOT compatible with v1.

include "zproto_lib.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate
.if switches.zproject ?= 1 & switches.private ?<> 1
.   file.delete ("$(class.package_dir)/$(class.name).h")
.   directory.create ("../api")
.   output "../api/$(class.name).api"
<!--
    $(class.name) - $(class.title:)

    Codec class for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
 -->
<class name = "$(class.name)"\
.   if defined (class.state)
 state = "$(class.state)"\
.       endif
>
.   for define
    <constant name = "$(define.name)" value = "$(define.value:)" />
.   endfor
.   for message
    <constant name = "$(message.name)" value = "$(id)" />
.   endfor
.   for class.field where type = "octets"
    <constant name = "$(field.name) size" value = "$(size)" />
.   endfor

<constructor>
    Create a new empty $(class.name)
</constructor>
    
<constructor name = "new_zpl">
    Create a new $(class.name) from zpl/zconfig_t *
    <argument name = "config" type = "zconfig" />
</constructor>

<destructor>
    Destroy a $(class.name) instance
</destructor>

<method name = "dup">
    Create a deep copy of a $(class.name) instance
    <return type="$(class.name)" fresh="1" />
</method>

.   if class.virtual ?= 1
<method name = "recv">
    Deserialize a $(class.name) from the specified message, popping
    as many frames as needed. Returns 0 if OK, -1 if there was an error.
    <argument name = "input" type = "zmsg" />
    <return type = "integer" />
</method>

<method name = "send">
    Serialize and append the $(class.name) to the specified message
    <argument name = "output" type = "zmsg" />
    <return type = "integer" />
</method>
.   else
<method name = "recv">
    Receive a $(class.name) from the socket. Returns 0 if OK, -1 if
    there was an error. Blocks if there is no message waiting.
    <argument name = "input" type = "zsock" />
    <return type = "integer" />
</method>

<method name = "send">
    Send the $(class.name) to the output socket, does not destroy it
    <argument name = "output" type = "zsock" />
    <return type = "integer" />
</method>
.   endif

<method name = "print">
    Print contents of message to stdout
</method>

<method name = "zpl">
    Export class as zconfig_t*. Caller is responsibe for destroying the instance
    <argument name = "parent" type = "zconfig" />
    <return type = "zconfig" fresh = "1" />
</method>


<method name = "routing id">
    Get the message routing id, as a frame
    <return type = "zframe" />
</method>

<method name = "set routing id">
    Set the message routing id from a frame
    <argument name = "routing id" type = "zframe" />
</method>

<method name = "id">
    Get the $(class.name) message id
    <return type = "integer" />
</method>

<method name = "set id">
    Set the $(class.name) message id
    <argument name = "id" type = "integer" />
</method>

<method name = "command">
    Get the $(class.name) message id as printable text
    <return type = "string" />
</method>

.   for class.field where !defined (value)
.       if type = "number"
<method name = "$(name)">
    Get the $(name) field
    <return type = "number" size = "$(size)" />
</method>
<method name = "set $(name)">
    Set the $(name) field
    <argument name = "$(name)" type = "number" size = "$(size)" />
</method>
.       elsif type = "octets"
<method name = "$(name)">
    Get the $(name) field
    <return type = "buffer" mutable = "1" size = "$(size)" />
</method>
<method name = "set $(name)">
    Set the $(name) field
    <argument name = "$(name)" type = "buffer" />
</method>
.       elsif type = "string" | type = "longstr"
<method name = "$(name)">
    Get the $(name) field
    <return type = "string" />
</method>
<method name = "set $(name)">
    Set the $(name) field
    <argument name = "$(name)" type = "string" />
</method>
.       elsif type = "strings"
<method name = "$(name)">
    Get the $(name) field
    <return type = "zlist" />
</method>
<method name = "get $(name)">
    Get the $(name) field and transfer ownership to caller
    <return type = "zlist" />
</method>
<method name = "set $(name)">
    Set the $(name) field
    <argument name = "$(name)_p" type = "zlist" by_reference = "1" />
</method>
.       elsif type = "uuid"
<method name = "$(name)">
    Get the $(name) field
    <return type = "z$(type)" />
</method>
<method name = "get $(name)">
    Get the $(name) field and transfer ownership to caller
    <return type = "z$(type)" />
</method>
<method name = "set $(name)">
    Set the $(name) field
    <argument name = "$(name)_p" type = "z$(type)" />
</method>
.       elsif type = "hash" | type = "chunk" | type = "frame" | type = "msg"
<method name = "$(name)">
    Get a copy of the $(name) field
    <return type = "z$(type)" />
</method>
<method name = "get $(name)">
    Get the $(name) field and transfer ownership to caller
    <return type = "z$(type)" />
</method>
    Set the $(name) field, transferring ownership from caller
<method name = "set $(name)">
    <argument name = "$(name)_p" type = "z$(type)" by_reference = "1" />
</method>
.       else
.           echo "E: unknown type '$(type)' for field '$(name)'"
.       endif
.   endfor
</class>
.else
.   output "$(class.package_dir)/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef $(CLASS.NAME)_H_INCLUDED
#define $(CLASS.NAME)_H_INCLUDED

/*  These are the $(class.name) messages:
.for message

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
        $(name)             $(type) $(size)\
                                        $(string.trim (field.)?'':left)
.       elsif type = "octets"
        $(name)             $(type) [$(size)]\
                                        $(string.trim (field.)?'':left)
.       else
        $(name)             $(type)     $(string.trim (field.)?'':left)
.       endif
.   endfor
.endfor
*/

.for define
#define $(CLASS.NAME)_$(DEFINE.NAME:C)      $(value:)
.endfor

.for message
#define $(CLASS.NAME)_$(MESSAGE.NAME)       $(id)
.endfor
.for class.field where type = "octets"
#define $(CLASS.NAME)_$(FIELD.NAME)_SIZE    $(size)
.endfor

.if file.exists ("../include/czmq.h")
#include "czmq.h"
.else
#include <czmq.h>
.endif

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
#ifndef $(CLASS.NAME)_T_DEFINED
typedef struct _$(class.name)_t $(class.name)_t;
#define $(CLASS.NAME)_T_DEFINED
#endif

//  @interface
//  Create a new empty $(class.name)
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_new (void);

//  Create a new $(class.name) from zpl/zconfig_t *
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_new_zpl (zconfig_t *config);

//  Destroy a $(class.name) instance
$(CLASS.EXPORT_MACRO)void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Create a deep copy of a $(class.name) instance
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_dup ($(class.name)_t *other);

.if class.virtual ?= 1
//  Deserialize a $(class.name) from the specified message, popping
//  as many frames as needed. Returns 0 if OK, -1 if the read was
//  interrupted, or -2 if the message is malformed.
$(CLASS.EXPORT_MACRO)int
    $(class.name)_recv ($(class.name)_t *self, zmsg_t *input);

//  Serialize and append the $(class.name) to the specified message
$(CLASS.EXPORT_MACRO)int
    $(class.name)_send ($(class.name)_t *self, zmsg_t *output);

.else
//  Receive a $(class.name) from the socket. Returns 0 if OK, -1 if
//  the read was interrupted, or -2 if the message is malformed.
//  Blocks if there is no message waiting.
$(CLASS.EXPORT_MACRO)int
    $(class.name)_recv ($(class.name)_t *self, zsock_t *input);

//  Send the $(class.name) to the output socket, does not destroy it
$(CLASS.EXPORT_MACRO)int
    $(class.name)_send ($(class.name)_t *self, zsock_t *output);

.endif

//  Print contents of message to stdout
$(CLASS.EXPORT_MACRO)void
    $(class.name)_print ($(class.name)_t *self);

//  Export class as zconfig_t*. Caller is responsibe for destroying the instance
$(CLASS.EXPORT_MACRO)zconfig_t *
    $(class.name)_zpl ($(class.name)_t *self, zconfig_t* parent);

//  Get/set the message routing id
$(CLASS.EXPORT_MACRO)zframe_t *
    $(class.name)_routing_id ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id);

//  Get the $(class.name) id and printable command
$(CLASS.EXPORT_MACRO)int
    $(class.name)_id ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_id ($(class.name)_t *self, int id);
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_command ($(class.name)_t *self);

.for class.field where !defined (value)
.   if type = "number"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)$(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name));
.#
.   elsif type = "octets"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)byte *
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name));
.#
.   elsif type = "string" | type = "longstr"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)const char *
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, const char *value);
.#
.   elsif type = "strings"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)zlist_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)zlist_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p);
.#
.   elsif type = "uuid"
//  Get/set the $(name) field
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_$(name) ($(class.name)_t *self);
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t *$(type));
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
.#
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "msg"
//  Get a copy of the $(name) field
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
$(CLASS.EXPORT_MACRO)z$(type)_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
$(CLASS.EXPORT_MACRO)void
    $(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
$(CLASS.EXPORT_MACRO)void
    $(class.name)_test (bool verbose);
//  @end

//  For backwards compatibility with old codecs
#define $(class.name)_dump  $(class.name)_print

#ifdef __cplusplus
}
#endif

#endif
.endif
.output "$(class.source_dir)/$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec class for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.title:)
@discuss
@end
*/

#ifdef NDEBUG
#undef NDEBUG
#endif

.if defined (class.project_header)
#include "$(class.project_header)"
.endif
#include "$(class.package_dir)/$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    zframe_t *routing_id;               //  Routing_id from ROUTER, if any
    int id;                             //  $(class.name) message ID
    byte *needle;                       //  Read/write pointer for serialization
    byte *ceiling;                      //  Valid upper limit for read pointer
.for class.field
.   if type = "number" & !defined (field.value)
    $(ctype) $(name);                   //  $(string.trim (field.)?name:left,block)
.   elsif type = "octets"
    byte $(name) [$(size)];             //  $(string.trim (field.)?name:left,block)
.   elsif type = "string" & !defined (field.value)
    char $(name) [256];                 //  $(string.trim (field.)?name:left,block)
.   elsif type = "longstr"
    char *$(name);                      //  $(string.trim (field.)?name:left,block)
.   elsif type = "strings"
    zlist_t *$(name);                   //  $(string.trim (field.)?name:left,block)
.   elsif type = "hash"
    zhash_t *$(name);                   //  $(string.trim (field.)?name:left,block)
    size_t $(name)_bytes;               //  Size of hash content
.   elsif type = "uuid" | type = "chunk" | type = "frame" | type = "msg"
    z$(type)_t *$(name);                //  $(string.trim (field.)?name:left,block)
.   endif
.endfor
};

//  --------------------------------------------------------------------------
//  Network data encoding macros

//  Put a block of octets to the frame
#define PUT_OCTETS(host,size) { \\
    memcpy (self->needle, (host), size); \\
    self->needle += size; \\
}

//  Get a block of octets from the frame
#define GET_OCTETS(host,size) { \\
    if (self->needle + size > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_OCTETS failed"); \\
        goto malformed; \\
    } \\
    memcpy ((host), self->needle, size); \\
    self->needle += size; \\
}

//  Put a 1-byte number to the frame
#define PUT_NUMBER1(host) { \\
    *(byte *) self->needle = (byte) (host); \\
    self->needle++; \\
}

//  Put a 2-byte number to the frame
#define PUT_NUMBER2(host) { \\
    self->needle [0] = (byte) (((host) >> 8)  & 255); \\
    self->needle [1] = (byte) (((host))       & 255); \\
    self->needle += 2; \\
}

//  Put a 4-byte number to the frame
#define PUT_NUMBER4(host) { \\
    self->needle [0] = (byte) (((host) >> 24) & 255); \\
    self->needle [1] = (byte) (((host) >> 16) & 255); \\
    self->needle [2] = (byte) (((host) >> 8)  & 255); \\
    self->needle [3] = (byte) (((host))       & 255); \\
    self->needle += 4; \\
}

//  Put a 8-byte number to the frame
#define PUT_NUMBER8(host) { \\
    self->needle [0] = (byte) (((host) >> 56) & 255); \\
    self->needle [1] = (byte) (((host) >> 48) & 255); \\
    self->needle [2] = (byte) (((host) >> 40) & 255); \\
    self->needle [3] = (byte) (((host) >> 32) & 255); \\
    self->needle [4] = (byte) (((host) >> 24) & 255); \\
    self->needle [5] = (byte) (((host) >> 16) & 255); \\
    self->needle [6] = (byte) (((host) >> 8)  & 255); \\
    self->needle [7] = (byte) (((host))       & 255); \\
    self->needle += 8; \\
}

//  Get a 1-byte number from the frame
#define GET_NUMBER1(host) { \\
    if (self->needle + 1 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER1 failed"); \\
        goto malformed; \\
    } \\
    (host) = *(byte *) self->needle; \\
    self->needle++; \\
}

//  Get a 2-byte number from the frame
#define GET_NUMBER2(host) { \\
    if (self->needle + 2 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER2 failed"); \\
        goto malformed; \\
    } \\
    (host) = ((uint16_t) (self->needle [0]) << 8) \\
           +  (uint16_t) (self->needle [1]); \\
    self->needle += 2; \\
}

//  Get a 4-byte number from the frame
#define GET_NUMBER4(host) { \\
    if (self->needle + 4 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER4 failed"); \\
        goto malformed; \\
    } \\
    (host) = ((uint32_t) (self->needle [0]) << 24) \\
           + ((uint32_t) (self->needle [1]) << 16) \\
           + ((uint32_t) (self->needle [2]) << 8) \\
           +  (uint32_t) (self->needle [3]); \\
    self->needle += 4; \\
}

//  Get a 8-byte number from the frame
#define GET_NUMBER8(host) { \\
    if (self->needle + 8 > self->ceiling) { \\
        zsys_warning ("$(class.name): GET_NUMBER8 failed"); \\
        goto malformed; \\
    } \\
    (host) = ((uint64_t) (self->needle [0]) << 56) \\
           + ((uint64_t) (self->needle [1]) << 48) \\
           + ((uint64_t) (self->needle [2]) << 40) \\
           + ((uint64_t) (self->needle [3]) << 32) \\
           + ((uint64_t) (self->needle [4]) << 24) \\
           + ((uint64_t) (self->needle [5]) << 16) \\
           + ((uint64_t) (self->needle [6]) << 8) \\
           +  (uint64_t) (self->needle [7]); \\
    self->needle += 8; \\
}

//  Put a string to the frame
#define PUT_STRING(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER1 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a string from the frame
#define GET_STRING(host) { \\
    size_t string_size; \\
    GET_NUMBER1 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) { \\
        zsys_warning ("$(class.name): GET_STRING failed"); \\
        goto malformed; \\
    } \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  Put a long string to the frame
#define PUT_LONGSTR(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER4 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a long string from the frame
#define GET_LONGSTR(host) { \\
    size_t string_size; \\
    GET_NUMBER4 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) { \\
        zsys_warning ("$(class.name): GET_LONGSTR failed"); \\
        goto malformed; \\
    } \\
    free ((host)); \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  --------------------------------------------------------------------------
//  bytes cstring conversion macros

// create new array of unsigned char from properly encoded string
// len of resulting array is strlen (str) / 2
// caller is responsibe for freeing up the memory
#define BYTES_FROM_STR(dst, _str) { \\
    char *str = (char*) (_str); \\
    if (!str || (strlen (str) % 2) != 0) \\
        return NULL; \\
\\
    size_t strlen_2 = strlen (str) / 2; \\
    byte *mem = (byte*) zmalloc (strlen_2); \\
\\
    for (size_t i = 0; i != strlen_2; i++) \\
    { \\
        char buff[3] = {0x0, 0x0, 0x0}; \\
        strncpy (buff, str, 2); \\
        unsigned int uint; \\
        sscanf (buff, "%x", &uint); \\
        assert (uint <= 0xff); \\
        mem [i] = (byte) (0xff & uint); \\
        str += 2; \\
    } \\
    dst = mem; \\
}

// convert len bytes to hex string
// caller is responsibe for freeing up the memory
#define STR_FROM_BYTES(dst, _mem, _len) { \\
    byte *mem = (byte*) (_mem); \\
    size_t len = (size_t) (_len); \\
    char* ret = (char*) zmalloc (2*len + 1); \\
    char* aux = ret; \\
    for (size_t i = 0; i != len; i++) \\
    { \\
        sprintf (aux, "%02x", mem [i]); \\
        aux+=2; \\
    } \\
    dst = ret; \\
}

//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new (void)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    return self;
}

//  --------------------------------------------------------------------------
//  Create a new $(class.name) from zpl/zconfig_t *

$(class.name)_t *
    $(class.name)_new_zpl (zconfig_t *config)
{
    assert (config);
    $(class.name)_t *self = NULL;
    char *message = zconfig_get (config, "message", NULL);
    if (!message) {
        zsys_error ("Can't find 'message' section");
        return NULL;
    }

.for class.message
    if (streq ("$(CLASS.NAME)_$(MESSAGE.NAME)", message)) {
        self = $(class.name)_new ();
        $(class.name)_set_id (self, $(CLASS.NAME)_$(MESSAGE.NAME));
    }
    else
.endfor
       {
        zsys_error ("message=%s is not known", message);
        return NULL;
       }

    char *s = zconfig_get (config, "routing_id", NULL);
    if (s) {
        byte *bvalue;
        BYTES_FROM_STR (bvalue, s);
        if (!bvalue) {
            $(class.name)_destroy (&self);
            return NULL;
        }
        zframe_t *frame = zframe_new (bvalue, strlen (s) / 2);
        free (bvalue);
        self->routing_id = frame;
    }

    zconfig_t *content = zconfig_locate (config, "content");
    if (!content) {
        zsys_error ("Can't find 'content' section");
        return NULL;
    }
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field where !defined (value)
.       if type = "number"
            {
            char *es = NULL;
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                zsys_error ("content/$(name) not found");
                $(class.name)_destroy (&self);
                return NULL;
            }
            uint64_t uvalue = (uint64_t) strtoll (s, &es, 10);
            if (es != s+strlen (s)) {
                zsys_error ("content/$(name): %s is not a number", s);
                $(class.name)_destroy (&self);
                return NULL;
            }
            self->$(name) = uvalue;
            }
.       elsif type = "octets"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            self->$(name) = bvalue;
            }
.       elsif type = "string" | type = "longstr"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
.           if type = "string"
            strncpy (self->$(name), s, 256);
.           else
            self->$(name) = strdup (s);
.           endif
            }
.       elsif type = "strings"
            {
            zconfig_t *zstrings = zconfig_locate (content, "$(name)");
            if (zstrings) {
                zlist_t *strings = zlist_new ();
                zlist_autofree (strings);
                for (zconfig_t *child = zconfig_child (zstrings);
                                child != NULL;
                                child = zconfig_next (child))
                {
                    zlist_append (strings, zconfig_value (child));
                }
                self->$(name) = strings;
            }
            }
.       elsif type = "hash"
            {
            zconfig_t *zhash = zconfig_locate (content, "$(name)");
            if (zhash) {
                zhash_t *hash = zhash_new ();
                zhash_autofree (hash);
                for (zconfig_t *child = zconfig_child (zhash);
                                child != NULL;
                                child = zconfig_next (child))
                {
                    zhash_update (hash, zconfig_name (child), zconfig_value (child));
                }
                self->$(name) = hash;
            }
            }
.       elsif type = "chunk"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            zchunk_t *chunk = zchunk_new (bvalue, strlen (s) / 2);
            free (bvalue);
            self->$(name) = chunk;
.       elsif type = "uuid"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (s) {
                zuuid_t *uuid = zuuid_new ();
                zuuid_set_str (uuid, s);
                self->$(name) = uuid;
            }
            }
.       elsif type = "frame"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            zframe_t *frame = zframe_new (bvalue, strlen (s) / 2);
            free (bvalue);
            self->$(name) = frame;
            }
.       elsif type = "msg"
            {
            char *s = zconfig_get (content, "$(name)", NULL);
            if (!s) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            byte *bvalue;
            BYTES_FROM_STR (bvalue, s);
            if (!bvalue) {
                $(class.name)_destroy (&self);
                return NULL;
            }
            zmsg_t *msg = zmsg_decode (bvalue, strlen (s) / 2);
            free (bvalue);
            self->$(name) = msg;
            }
.       endif
.   endfor
            break;
.endfor
    }
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
        zframe_destroy (&self->routing_id);
.for class.field
.   if type = "longstr"
        free (self->$(name));
.   elsif type = "strings"
        if (self->$(name))
            zlist_destroy (&self->$(name));
.   elsif type = "uuid" | type = "hash" | type = "chunk" | type = "frame" | type = "msg"
        z$(type)_destroy (&self->$(name));
.   endif
.endfor

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Create a deep copy of a $(class.name) instance

$(class.name)_t *
$(class.name)_dup ($(class.name)_t *other)
{
    assert (other);
    $(class.name)_t *copy = $(class.name)_new ();

    // Copy the routing and message id
    $(class.name)_set_routing_id (copy, zframe_dup ($(class.name)_routing_id (other)));
    $(class.name)_set_id (copy, $(class.name)_id (other));

    // Copy the rest of the fields
.for class.field
.   if type = "longstr"
    {
        const char *str = $(class.name)_$(name) (other);
        if (str) {
            $(class.name)_set_$(name) (copy, strdup (str));
        }
    }
.   elsif type = "hash" | type = "chunk" | type = "frame" | type = "msg"
    {
        z$(type)_t *dup_$(type:) = z$(type)_dup ($(class.name)_$(name) (other));
        $(class.name)_set_$(name) (copy, &dup_$(type:));
    }
.   elsif type = "strings"
    {
        zlist_t *lcopy = zlist_dup ($(class.name)_$(name) (other));
        $(class.name)_set_$(name) (copy, &lcopy);
    }
.   elsif type = "uuid" | type = "number" | type = "string" & !defined (value)
    $(class.name)_set_$(name) (copy, $(class.name)_$(name) (other));
.   endif
.endfor

    return copy;
}

.macro calculate_frame_size
    size_t frame_size = 2 + 1;          //  Signature and message ID
    switch (self->id) {
.for class.message where count (field)
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            frame_size += $(size);      //  $(name)
.       elsif type = "octets"
            frame_size += $(size);      //  $(name)
.       elsif type = "string"
.           if defined (field.value)
            frame_size += 1 + strlen ("$(value:)");
.           else
            frame_size += 1 + strlen (self->$(name));
.           endif
.       elsif type = "longstr"
            frame_size += 4;
            if (self->$(name))
                frame_size += strlen (self->$(name));
.       elsif type = "strings"
            frame_size += 4;            //  Size is 4 octets
            if (self->$(name)) {
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    frame_size += 4 + strlen ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "uuid"
            frame_size += ZUUID_LEN;    //  $(name)
.       elsif type = "hash"
            frame_size += 4;            //  Size is 4 octets
            if (self->$(name)) {
                self->$(name)_bytes = 0;
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    self->$(name)_bytes += 1 + strlen (zhash_cursor (self->$(name)));
                    self->$(name)_bytes += 4 + strlen (item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            frame_size += self->$(name)_bytes;
.       elsif type = "chunk"
            frame_size += 4;            //  Size is 4 octets
            if (self->$(name))
                frame_size += zchunk_size (self->$(name));
.       elsif type = "frame"
.       elsif type = "msg"
.           class.msg = name
.           if item () <> count (message.field)
.               echo "E: in $(message.name:), $(field.name) must come last"
.           endif
.       endif
.   endfor
            break;
.endfor
    }
.endmacro
.#
.if class.virtual ?= 1
//  --------------------------------------------------------------------------
//  Deserialize a $(class.name) from the specified message, popping
//  as many frames as needed. Returns 0 if OK, -1 if the recv was interrupted,
//  or -2 if the message is malformed.
int
$(class.name)_recv ($(class.name)_t *self, zmsg_t *input)
{
    assert (input);
    int rc = 0;


    zframe_t *frame = zmsg_pop (input);
    if (!frame) {
        zsys_warning ("$(class.name): missing frames in message");
        rc = -1;                //  Interrupted
        goto malformed;
    }
    //  Get and check protocol signature
    self->needle = zframe_data (frame);
    self->ceiling = self->needle + zframe_size (frame);

    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature))) {
        zsys_warning ("$(class.name): invalid signature");
        rc = -2;                //  Malformed
        goto malformed;
    }
    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            {
                $(ctype) $(name);
                GET_NUMBER$(size) ($(name));
                if ($(name) != $(value:)) {
                    zsys_warning ("$(class.name): $(name) is invalid");
                    rc = -2;    //  Malformed
                    goto malformed;
                }
            }
.           else
            GET_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            GET_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            {
                char $(name) [256];
                GET_STRING ($(name));
                if (strneq ($(name), "$(value:)")) {
                    zsys_warning ("$(class.name): $(name) is invalid");
                    rc = -2;    //  Malformed
                    goto malformed;
                }
            }
.           else
            GET_STRING (self->$(name));
.           endif
.       elsif type = "longstr"
            GET_LONGSTR (self->$(name));
.       elsif type = "strings"
            {
                size_t list_size;
                GET_NUMBER4 (list_size);
                zlist_destroy (&self->$(name));
                self->$(name) = zlist_new ();
                zlist_autofree (self->$(name));
                while (list_size--) {
                    char *string = NULL;
                    GET_LONGSTR (string);
                    zlist_append (self->$(name), string);
                    free (string);
                }
            }
.       elsif type = "uuid"
            if (self->needle + ZUUID_LEN > (self->ceiling)) {
                zsys_warning ("$(class.name): $(name) is invalid");
                rc = -2;        //  Malformed
                goto malformed;
            }
            zuuid_destroy (&self->$(name));
            self->$(name) = zuuid_new_from (self->needle);
            self->needle += ZUUID_LEN;
.       elsif type = "hash"
            {
                size_t hash_size;
                GET_NUMBER4 (hash_size);
                zhash_destroy (&self->$(name));
                self->$(name) = zhash_new ();
                zhash_autofree (self->$(name));
                while (hash_size--) {
                    char key [256];
                    char *value = NULL;
                    GET_STRING (key);
                    GET_LONGSTR (value);
                    zhash_insert (self->$(name), key, value);
                    free (value);
                }
            }
.       elsif type = "chunk"
            {
                size_t chunk_size;
                GET_NUMBER4 (chunk_size);
                if (self->needle + chunk_size > (self->ceiling)) {
                    zsys_warning ("$(class.name): $(name) is missing data");
                    rc = -2;    //  Malformed
                    goto malformed;
                }
                zchunk_destroy (&self->$(name));
                self->$(name) = zchunk_new (self->needle, chunk_size);
                self->needle += chunk_size;
            }
.       elsif type = "frame"
            zframe_destroy (&self->$(name));
            self->$(name) = zmsg_pop (input);
.       elsif type = "msg"
            //  Get zero or more remaining frames
            zmsg_destroy (&self->$(name));
            self->$(name) = zmsg_new ();
            while (zmsg_size (input)) {
                zframe_t *frame = zmsg_pop (input);
                zmsg_append (self->$(name), &frame);
            }
.       endif
.   endfor
            break;

.endfor
        default:
            zsys_warning ("$(class.name): bad message ID");
            rc = -2;            //  Malformed
            goto malformed;
    }
    zframe_destroy (&frame);
    //  Successful return
    return rc;

    //  Error returns
    malformed:
        zframe_destroy (&frame);
        return rc;              //  Invalid message
}


//  --------------------------------------------------------------------------
//  Serialize and append the $(class.name) to the specified message
int
$(class.name)_send ($(class.name)_t *self, zmsg_t *output)
{
    assert (self);
    assert (output);
.   calculate_frame_size ()
    //  Now serialize message into the frame
    zframe_t *frame = zframe_new (NULL, frame_size);
    self->needle = zframe_data (frame);
    PUT_NUMBER2 (0xAAA0 | $(class.signature));
    PUT_NUMBER1 (self->id);
.if defined (class.msg)
    bool have_$(class.msg) = false;
.endif

    switch (self->id) {
.for class.message where count (field)
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(value:)");
.           else
            PUT_STRING (self->$(name));
.           endif
.       elsif type = "longstr"
            if (self->$(name)) {
                PUT_LONGSTR (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty string
.       elsif type = "strings"
            if (self->$(name)) {
                PUT_NUMBER4 (zlist_size (self->$(name)));
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    PUT_LONGSTR ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty string array
.       elsif type = "hash"
            if (self->$(name)) {
                PUT_NUMBER4 (zhash_size (self->$(name)));
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    PUT_STRING (zhash_cursor (self->$(name)));
                    PUT_LONGSTR (item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty hash
.       elsif type = "chunk"
            if (self->$(name)) {
                PUT_NUMBER4 (zchunk_size (self->$(name)));
                memcpy (self->needle,
                        zchunk_data (self->$(name)),
                        zchunk_size (self->$(name)));
                self->needle += zchunk_size (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty chunk
.       elsif type = "uuid"
            if (self->$(name))
                zuuid_export (self->$(name), self->needle);
            else
                memset (self->needle, 0, ZUUID_LEN);
            self->needle += ZUUID_LEN;
.       elsif type = "msg"
            have_$(class.msg) = true;
.       endif
.   endfor
            break;

.endfor
    }
    //  Now store the frame data
    zmsg_append (output, &frame);

.for class.message where count (field, type = "frame")
    //  Now append any frame fields, in order
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
.   for field where type = "frame"
        //  If $(name) isn't set, send an empty frame
        if (self->$(field.name)) {
            zframe_t *frame = zframe_dup (self->$(field.name));
            zmsg_append (output, &frame);
        }
        else
            zmsg_addstr (output, "");
.   endfor
    }
.endfor
.if defined (class.msg)
    //  Now append the $(class.msg) if necessary
    if (have_$(class.msg)) {
        if (self->$(class.msg)) {
            zframe_t *frame = zmsg_first (self->$(class.msg));
            while (frame) {
                frame = zframe_dup (frame);
                zmsg_append (output, &frame);
                frame = zmsg_next (self->$(class.msg));
            }
        }
        else
            zmsg_addstr (output, "");
    }
.endif
    return 0;
}


.else
//  --------------------------------------------------------------------------
//  Receive a $(class.name) from the socket. Returns 0 if OK, -1 if
//  the recv was interrupted, or -2 if the message is malformed.
//  Blocks if there is no message waiting.

int
$(class.name)_recv ($(class.name)_t *self, zsock_t *input)
{
    assert (input);
    int rc = 0;
    zmq_msg_t frame;
    zmq_msg_init (&frame);

    if (zsock_type (input) == ZMQ_ROUTER) {
        zframe_destroy (&self->routing_id);
        self->routing_id = zframe_recv (input);
        if (!self->routing_id || !zsock_rcvmore (input)) {
            zsys_warning ("$(class.name): no routing ID");
            rc = -1;            //  Interrupted
            goto malformed;
        }
    }
    int size;
    size = zmq_msg_recv (&frame, zsock_resolve (input), 0);
    if (size == -1) {
        zsys_warning ("$(class.name): interrupted");
        rc = -1;                //  Interrupted
        goto malformed;
    }
    //  Get and check protocol signature
    self->needle = (byte *) zmq_msg_data (&frame);
    self->ceiling = self->needle + zmq_msg_size (&frame);

.if switches.digest ?= 1
    zdigest_t *digest = zdigest_new ();
.endif
    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature))) {
        zsys_warning ("$(class.name): invalid signature");
        rc = -2;                //  Malformed
        goto malformed;
    }
    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   if switches.digest ?= 1
            zdigest_update (digest, (byte *) zmq_msg_data (&frame), zmq_msg_size (&frame));
            //  This is a hacky way of sending digests to the
            //  "./selftest -d" script through stderr
            fprintf (stderr, "$(MESSAGE.NAME)-%s\\n", zdigest_string (digest));

.   endif
.   for field
.       if type = "number"
.           if defined (field.value)
            {
                $(ctype) $(name);
                GET_NUMBER$(size) ($(name));
                if ($(name) != $(value:)) {
                    zsys_warning ("$(class.name): $(name) is invalid");
                    rc = -2;    //  Malformed
                    goto malformed;
                }
            }
.           else
            GET_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            GET_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            {
                char $(name) [256];
                GET_STRING ($(name));
                if (strneq ($(name), "$(value:)")) {
                    zsys_warning ("$(class.name): $(name) is invalid");
                    rc = -2;    //  Malformed
                    goto malformed;
                }
            }
.           else
            GET_STRING (self->$(name));
.           endif
.       elsif type = "longstr"
            GET_LONGSTR (self->$(name));
.       elsif type = "strings"
            {
                size_t list_size;
                GET_NUMBER4 (list_size);
                zlist_destroy (&self->$(name));
                self->$(name) = zlist_new ();
                zlist_autofree (self->$(name));
                while (list_size--) {
                    char *string = NULL;
                    GET_LONGSTR (string);
                    zlist_append (self->$(name), string);
                    free (string);
                }
            }
.       elsif type = "uuid"
            if (self->needle + ZUUID_LEN > (self->ceiling)) {
                zsys_warning ("$(class.name): $(name) is invalid");
                rc = -2;        //  Malformed
                goto malformed;
            }
            zuuid_destroy (&self->$(name));
            self->$(name) = zuuid_new_from (self->needle);
            self->needle += ZUUID_LEN;
.       elsif type = "hash"
            {
                size_t hash_size;
                GET_NUMBER4 (hash_size);
                zhash_destroy (&self->$(name));
                self->$(name) = zhash_new ();
                zhash_autofree (self->$(name));
                while (hash_size--) {
                    char key [256];
                    char *value = NULL;
                    GET_STRING (key);
                    GET_LONGSTR (value);
                    zhash_insert (self->$(name), key, value);
                    free (value);
                }
            }
.       elsif type = "chunk"
            {
                size_t chunk_size;
                GET_NUMBER4 (chunk_size);
                if (self->needle + chunk_size > (self->ceiling)) {
                    zsys_warning ("$(class.name): $(name) is missing data");
                    rc = -2;    //  Malformed
                    goto malformed;
                }
                zchunk_destroy (&self->$(name));
                self->$(name) = zchunk_new (self->needle, chunk_size);
                self->needle += chunk_size;
            }
.       elsif type = "frame"
            //  Get next frame off socket
            if (!zsock_rcvmore (input)) {
                zsys_warning ("$(class.name): $(name) is missing");
                rc = -2;        //  Malformed
                goto malformed;
            }
            zframe_destroy (&self->$(name));
            self->$(name) = zframe_recv (input);
.       elsif type = "msg"
            //  Get zero or more remaining frames
            zmsg_destroy (&self->$(name));
            if (zsock_rcvmore (input))
                self->$(name) = zmsg_recv (input);
            else
                self->$(name) = zmsg_new ();
.       endif
.   endfor
            break;

.endfor
        default:
            zsys_warning ("$(class.name): bad message ID");
            rc = -2;            //  Malformed
            goto malformed;
    }
    //  Successful return
.if switches.digest ?= 1
    zdigest_destroy (&digest);
.endif
    zmq_msg_close (&frame);
    return rc;

    //  Error returns
    malformed:
.if switches.digest ?= 1
        zdigest_destroy (&digest);
.endif
        zmq_msg_close (&frame);
        return rc;              //  Invalid message
}


//  --------------------------------------------------------------------------
//  Send the $(class.name) to the socket. Does not destroy it. Returns 0 if
//  OK, else -1.

int
$(class.name)_send ($(class.name)_t *self, zsock_t *output)
{
    assert (self);
    assert (output);

    if (zsock_type (output) == ZMQ_ROUTER)
        zframe_send (&self->routing_id, output, ZFRAME_MORE + ZFRAME_REUSE);

.   calculate_frame_size ()
    //  Now serialize message into the frame
    zmq_msg_t frame;
    zmq_msg_init_size (&frame, frame_size);
    self->needle = (byte *) zmq_msg_data (&frame);
    PUT_NUMBER2 (0xAAA0 | $(class.signature));
    PUT_NUMBER1 (self->id);
.if defined (class.msg)
    bool have_$(class.msg) = false;
.endif
    size_t nbr_frames = 1;              //  Total number of frames to send

    switch (self->id) {
.for class.message where count (field)
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(value:)");
.           else
            PUT_STRING (self->$(name));
.           endif
.       elsif type = "longstr"
            if (self->$(name)) {
                PUT_LONGSTR (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty string
.       elsif type = "strings"
            if (self->$(name)) {
                PUT_NUMBER4 (zlist_size (self->$(name)));
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    PUT_LONGSTR ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty string array
.       elsif type = "hash"
            if (self->$(name)) {
                PUT_NUMBER4 (zhash_size (self->$(name)));
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    PUT_STRING (zhash_cursor (self->$(name)));
                    PUT_LONGSTR (item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty hash
.       elsif type = "chunk"
            if (self->$(name)) {
                PUT_NUMBER4 (zchunk_size (self->$(name)));
                memcpy (self->needle,
                        zchunk_data (self->$(name)),
                        zchunk_size (self->$(name)));
                self->needle += zchunk_size (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty chunk
.       elsif type = "uuid"
            if (self->$(name))
                zuuid_export (self->$(name), self->needle);
            else
                memset (self->needle, 0, ZUUID_LEN);
            self->needle += ZUUID_LEN;
.       elsif type = "frame"
            nbr_frames++;
.       elsif type = "msg"
            nbr_frames += self->$(name)? zmsg_size (self->$(name)): 1;
            have_$(class.msg) = true;
.       endif
.   endfor
            break;

.endfor
    }
    //  Now send the data frame
    zmq_msg_send (&frame, zsock_resolve (output), --nbr_frames? ZMQ_SNDMORE: 0);

.for class.message where count (field, type = "frame")
    //  Now send any frame fields, in order
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
.   for field where type = "frame"
        //  If $(name) isn't set, send an empty frame
        if (self->$(field.name))
            zframe_send (&self->$(field.name), output, ZFRAME_REUSE + (--nbr_frames? ZFRAME_MORE: 0));
        else
            zmq_send (zsock_resolve (output), NULL, 0, (--nbr_frames? ZMQ_SNDMORE: 0));
.   endfor
    }
.endfor
.if defined (class.msg)
    //  Now send the $(class.msg) if necessary
    if (have_$(class.msg)) {
        if (self->$(class.msg)) {
            zframe_t *frame = zmsg_first (self->$(class.msg));
            while (frame) {
                zframe_send (&frame, output, ZFRAME_REUSE + (--nbr_frames? ZFRAME_MORE: 0));
                frame = zmsg_next (self->$(class.msg));
            }
        }
        else
            zmq_send (zsock_resolve (output), NULL, 0, 0);
    }
.endif
    return 0;
}


.endif
//  --------------------------------------------------------------------------
//  Print contents of message to stdout

void
$(class.name)_print ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            zsys_debug ("$(CLASS.NAME)_$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            zsys_debug ("    $(name)=$(field.value)");
.           else
            zsys_debug ("    $(name)=%ld", (long) self->$(name));
.           endif
.       elsif type = "octets"
            zsys_debug ("    $(name)=[ ... ]");
.       elsif type = "string"
.           if defined (field.value)
            zsys_debug ("    $(name)=$(field.value)");
.           else
            zsys_debug ("    $(name)='%s'", self->$(name));
.           endif
.       elsif type = "longstr"
.           if defined (field.value)
            zsys_debug ("    $(name)=$(field.value)");
.           else
            if (self->$(name))
                zsys_debug ("    $(name)='%s'", self->$(name));
            else
                zsys_debug ("    $(name)=");
.           endif
.       elsif type = "strings"
            zsys_debug ("    $(name)=");
            if (self->$(name)) {
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    zsys_debug ("        '%s'", $(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "hash"
            zsys_debug ("    $(name)=");
            if (self->$(name)) {
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    zsys_debug ("        %s=%s", zhash_cursor (self->$(name)), item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
            else
                zsys_debug ("(NULL)");
.       elsif type = "chunk"
            zsys_debug ("    $(name)=[ ... ]");
.       elsif type = "uuid"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zsys_debug ("        %s", zuuid_str_canonical (self->$(name)));
            else
                zsys_debug ("        (NULL)");
.       elsif type = "frame"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zframe_print (self->$(name), NULL);
            else
                zsys_debug ("(NULL)");
.       elsif type = "msg"
            zsys_debug ("    $(name)=");
            if (self->$(name))
                zmsg_print (self->$(name));
            else
                zsys_debug ("(NULL)");
.       endif
.   endfor
            break;

.endfor
    }
}

//  --------------------------------------------------------------------------
//  Export class as zconfig_t*. Caller is responsibe for destroying the instance

zconfig_t *
$(class.name)_zpl ($(class.name)_t *self, zconfig_t *parent)
{
    assert (self);

    zconfig_t *root = zconfig_new ("$(class.name)", parent);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
        {
            zconfig_put (root, "message", "$(CLASS.NAME)_$(MESSAGE.NAME)");

            if (self->routing_id) {
                char *hex = NULL;
                STR_FROM_BYTES (hex, zframe_data (self->routing_id), zframe_size (self->routing_id));
                zconfig_putf (root, "routing_id", "%s", hex);
                zstr_free (&hex);
            }

            zconfig_t *config = zconfig_new ("content", root);
.   for field
.       if type = "number"
.           if defined (field.value)
            zconfig_putf (config, "$(name)", "%s", "$(field.value)");
.           else
            zconfig_putf (config, "$(name)", "%ld", (long) self->$(name));
.           endif
.       elsif type = "octets"
            {
            char *hex = NULL;
            STR_FROM_BYTES (hex, self->$(name), $(size));
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            }
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            zconfig_putf (config, "$(name)", "%s", "$(field.value)");
.           else
            if (self->$(name))
                zconfig_putf (config, "$(name)", "%s", self->$(name));
.           endif
.       elsif type = "strings"
            if (self->$(name)) {
                zconfig_t *strings = zconfig_new ("$(name)", config);
                size_t i = 0;
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    char *key = zsys_sprintf ("%zu", i);
                    zconfig_putf (config, key, "%s", $(name));
                    zstr_free (&key);
                    i++;
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "hash"
            if (self->$(name)) {
                zconfig_t *hash = zconfig_new ("$(name)", config);
                char *item = (char *) zhash_first (self->$(name));
                while (item) {
                    zconfig_putf (hash, zhash_cursor (self->$(name)), "%s", item);
                    item = (char *) zhash_next (self->$(name));
                }
            }
.       elsif type = "chunk"
            {
            char *hex = NULL;
            STR_FROM_BYTES (hex, zchunk_data (self->$(name)), zchunk_size (self->$(name)));
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            }
.       elsif type = "uuid"
            if (self->$(name))
                zconfig_putf (config, "$(name)", "%s", zuuid_str (self->$(name)));
.       elsif type = "frame"
            {
            char *hex = NULL;
            STR_FROM_BYTES (hex, zframe_data (self->$(name)), zframe_size (self->$(name)));
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            }
.       elsif type = "msg"
            {
            char *hex = NULL;
            byte *buffer;
            size_t size = zmsg_encode (self->$(name), &buffer);
            STR_FROM_BYTES (hex, buffer, size);
            zconfig_putf (config, "$(name)", "%s", hex);
            zstr_free (&hex);
            free (buffer); buffer= NULL;
            }
.       endif
.   endfor
            break;
            }
.endfor
    }
    return root;
}

//  --------------------------------------------------------------------------
//  Get/set the message routing_id

zframe_t *
$(class.name)_routing_id ($(class.name)_t *self)
{
    assert (self);
    return self->routing_id;
}

void
$(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id)
{
    if (self->routing_id)
        zframe_destroy (&self->routing_id);
    self->routing_id = zframe_dup (routing_id);
}


//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_set_id ($(class.name)_t *self, int id)
{
    self->id = id;
}

//  --------------------------------------------------------------------------
//  Return a printable command string

const char *
$(class.name)_command ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            return ("$(MESSAGE.NAME)");
            break;
.endfor
    }
    return "?";
}

.for class.field where !defined (value)
.   if type = "number"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "octets"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name))
{
    assert (self);
    memcpy (self->$(name), $(name), $(size));
}

.   elsif type = "string"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *value)
{
    assert (self);
    assert (value);
    if (value == self->$(name))
        return;
    strncpy (self->$(name), value, 255);
    self->$(name) [255] = 0;
}

.   elsif type = "longstr"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *value)
{
    assert (self);
    assert (value);
    free (self->$(name));
    self->$(name) = strdup (value);
}

.   elsif type = "strings"
//  --------------------------------------------------------------------------
//  Get the $(name) field, without transferring ownership

zlist_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zlist_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    assert (self);
    zlist_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zlist_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}


.   elsif type = "hash"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

zhash_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zhash_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    zhash_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zhash_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zhash_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}

.   elsif type = "uuid"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field
zuuid_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, zuuid_t *uuid)
{
    assert (self);
    zuuid_destroy (&self->$(name));
    self->$(name) = zuuid_dup (uuid);
}

//  Get the $(name) field and transfer ownership to caller

zuuid_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    zuuid_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

.   elsif type = "chunk" | type = "frame" | type = "msg"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

z$(type)_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

z$(type)_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    z$(type)_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p)
{
    assert (self);
    assert ($(type)_p);
    z$(type)_destroy (&self->$(name));
    self->$(name) = *$(type)_p;
    *$(type)_p = NULL;
}

.   endif

.endfor

//  --------------------------------------------------------------------------
//  Selftest

void
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");
.if switches.digest ?= 1
    printf ("\\n");
.endif

    if (verbose)
        printf ("\\n");

    //  @selftest
    //  Simple create/destroy test
    zconfig_t *config;
    $(class.name)_t *self = $(class.name)_new ();
    assert (self);
    $(class.name)_destroy (&self);
.if class.virtual ?= 1
    zmsg_t *output = zmsg_new ();
    assert (output);

    zmsg_t *input = zmsg_new ();
    assert (input);
.else
    //  Create pair of sockets we can send through
    //  We must bind before connect if we wish to remain compatible with ZeroMQ < v4
    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    int rc = zsock_bind (output, "inproc://selftest-$(class.name)");
    assert (rc == 0);

    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    rc = zsock_connect (input, "inproc://selftest-$(class.name)");
    assert (rc == 0);
.endif


    //  Encode/send/decode and verify each message type
    int instance;
    self = $(class.name)_new ();
.for class.message
    $(class.name)_set_id (self, $(CLASS.NAME)_$(MESSAGE.NAME));

.   for field where !defined (value)
.       if type = "number"
    $(class.name)_set_$(name) (self, $(->test.?123:));
.       elsif type = "octets"
.           if defined (->test)
    byte $(name)_data [$(CLASS.NAME)_$(FIELD.NAME)_SIZE] = "$(->test.)";
    $(class.name)_set_$(name) (self, $(name)_data);
.           else
    byte $(name)_data_$(item ()) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE];
    memset ($(name)_data_$(item ()), 123, $(CLASS.NAME)_$(FIELD.NAME)_SIZE);
    $(class.name)_set_$(name) (self, $(name)_data_$(item ()));
.           endif
.       elsif type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, "$(->test.?"Life is short but Now lasts for ever":)");
.       elsif type = "strings"
    zlist_t *$(message.name)_$(name) = zlist_new ();
.           if defined (->test)
.               for test
    zlist_append ($(message.name)_$(field.name), "$(test.)");
.               endfor
.           else
    zlist_append ($(message.name)_$(name), "Name: Brutus");
    zlist_append ($(message.name)_$(name), "Age: 43");
.           endif
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "hash"
    zhash_t *$(message.name)_$(name) = zhash_new ();
.           if defined (->test)
.               for test
    zhash_insert ($(message.name)_$(field.name), "$(test.name)", "$(test.)");
.               endfor
.           else
    zhash_insert ($(message.name)_$(field.name), "Name", "Brutus");
.           endif
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "chunk" | type = "frame"
    z$(type)_t *$(message.name)_$(name) = z$(type)_new ("$(->test.?"Captcha Diem":)", $(->test.??12?string.length(->test.?"Captcha Diem"):));
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "uuid"
    zuuid_t *$(message.name)_$(name) = zuuid_new ();
.           if defined (->test)
    zuuid_set_str ($(message.name)_$(name), "$(->test.)");
.           endif
    $(class.name)_set_$(name) (self, $(message.name)_$(name));
.       elsif type = "msg"
    zmsg_t *$(message.name)_$(name) = zmsg_new ();
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
    zmsg_addstr ($(class.name)_$(name) (self), "$(->test.?"Captcha Diem":)");
.       endif
.   endfor
.if class.virtual ?= 1
    zmsg_destroy (&output);
    output = zmsg_new ();
    assert (output);
.endif
    // convert to zpl
    config = $(class.name)_zpl (self, NULL);
    if (verbose)
        zconfig_print (config);
    //  Send twice
    $(class.name)_send (self, output);
    $(class.name)_send (self, output);

.if class.virtual ?= 1
    zmsg_destroy (&input);
    input = zmsg_dup (output);
    assert (input);
.endif
    for (instance = 0; instance < 3; instance++) {
        $(class.name)_t *self_temp = self;
        if (instance < 2)
            $(class.name)_recv (self, input);
        else {
            self = $(class.name)_new_zpl (config);
            zconfig_destroy (&config);
        }
        if (instance < 2)
.if class.virtual ?= 1
            assert ($(class.name)_routing_id (self) == NULL);
.else
            assert ($(class.name)_routing_id (self));
.endif
.   for field where !defined (value)
.       if type = "number"
        assert ($(class.name)_$(name) (self) == $(->test.?123:));
.       elsif type = "octets"
.           if defined (->test)
        assert (memcmp ($(class.name)_$(name) (self), "$(->test.)", $(CLASS.NAME)_$(FIELD.NAME)_SIZE) == 0);
.           else
        assert ($(class.name)_$(name) (self) [0] == 123);
        assert ($(class.name)_$(name) (self) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE - 1] == 123);
.           endif
.       elsif type = "string" | type = "longstr"
        assert (streq ($(class.name)_$(name) (self), "$(->test.?"Life is short but Now lasts for ever":)"));
.       elsif type = "strings"
        zlist_t *$(name) = $(class.name)_get_$(name) (self);
        assert ($(name));
.           if defined (->test)
.               for test
.                   if first ()
        assert (streq ((char *) zlist_first ($(field.name)), "$(test.)"));
.                   else
        assert (streq ((char *) zlist_next ($(field.name)), "$(test.)"));
.                   endif
.               endfor
.           else
        assert (zlist_size ($(name)) == 2);
        assert (streq ((char *) zlist_first ($(name)), "Name: Brutus"));
        assert (streq ((char *) zlist_next ($(name)), "Age: 43"));
.           endif
        zlist_destroy (&$(name));
        zlist_destroy (&$(message.name)_$(name));
.       elsif type = "hash"
        zhash_t *$(name) = $(class.name)_get_$(name) (self);
.           if defined (->test)
.               for test
.                   if first ()
        assert (streq ((char *) zhash_first ($(field.name)), "$(test.)"));
        assert (streq ((char *) zhash_cursor ($(field.name)), "$(test.name)"));
.                   else
        assert (streq ((char *) zhash_next ($(field.name)), "$(test.)"));
        assert (streq ((char *) zhash_cursor ($(field.name)), "$(test.name)"));
.                   endif
.               endfor
.           else
        assert (zhash_size ($(name)) == 1);
        assert (streq ((char *) zhash_first ($(name)), "Brutus"));
        assert (streq ((char *) zhash_cursor ($(name)), "Name"));
.           endif
        zhash_destroy (&$(name));
        if (instance == 1)
            zhash_destroy (&$(message.name)_$(name));
.       elsif type = "chunk"
        assert (memcmp (zchunk_data ($(class.name)_$(name) (self)), "$(->test.?"Captcha Diem":)", $(->test.??12?string.length(->test.?"Captcha Diem"):)) == 0);
        if (instance == 1)
            zchunk_destroy (&$(message.name)_$(name));
.       elsif type = "frame"
        assert (zframe_streq ($(class.name)_$(name) (self), "$(->test.?"Captcha Diem":)"));
        if (instance == 1)
            zframe_destroy (&$(message.name)_$(name));
.       elsif type = "msg"
        assert (zmsg_size ($(class.name)_$(name) (self)) == 1);
        char *content = zmsg_popstr ($(class.name)_$(name) (self));
        assert (streq (content, "$(->test.?"Captcha Diem":)"));
        zstr_free (&content);
        if (instance == 1)
            zmsg_destroy (&$(message.name)_$(name));
.       elsif type = "uuid"
        assert (zuuid_eq ($(message.name)_$(name), zuuid_data ($(class.name)_$(name) (self))));
        if (instance == 1)
            zuuid_destroy (&$(message.name)_$(name));
.       endif
.   endfor
        if (instance == 2) {
            zm_proto_destroy (&self);
            self = self_temp;
        }
    }
.endfor

    $(class.name)_destroy (&self);
.if class.virtual ?= 1
    zmsg_destroy (&input);
    zmsg_destroy (&output);
.else
    zsock_destroy (&input);
    zsock_destroy (&output);
.endif
    //  @end

    printf ("OK\\n");
}
