.template 0
#   zproto_codec_c.gsl
#
#   Generates a codec for a protocol specification
#
include "zproto_lib.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
generate_bnf ()
set_defaults ()
.endtemplate
.output "$(class.header)/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)
    
    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************
    
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

/*  These are the $(class.name) messages:
.for message

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
        $(name)             $(type) $(size)\
                                        $(field.?'':)
.       elsif type = "octets"
        $(name)             $(type) [$(size)]\
                                        $(field.?'':)
.       else
        $(name)             $(type)     $(field.?'':)
.       endif
.   endfor
.endfor
*/

.for define
#define $(CLASS.NAME)_$(DEFINE.NAME:C)      $(value)
.endfor

.for message
#define $(CLASS.NAME)_$(MESSAGE.NAME)       $(id)
.endfor
.for class.field where type = "octets"
#define $(CLASS.NAME)_$(FIELD.NAME)_SIZE    $(size)
.endfor

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  @interface
//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (int id);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Parse a $(class.name) from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL. If the socket type is
//  ZMQ_ROUTER, then parses the first frame as a routing_id. Destroys msg
//  and nullifies the msg refernce.
$(class.name)_t *
    $(class.name)_decode (zmsg_t **msg_p, int socket_type);

//  Encode $(class.name) into zmsg and destroy it. Returns a newly created
//  object or NULL if error. Use when not in control of sending the message.
//  If the socket_type is ZMQ_ROUTER, then stores the routing_id as the
//  first frame of the resulting message.
zmsg_t *
    $(class.name)_encode ($(class.name)_t *self, int socket_type);

//  Receive and parse a $(class.name) from the socket. Returns new object, 
//  or NULL if error. Will block if there's no message waiting.
$(class.name)_t *
    $(class.name)_recv (void *input);

//  Receive and parse a $(class.name) from the socket. Returns new object, 
//  or NULL either if there was no input waiting, or the recv was interrupted.
$(class.name)_t *
    $(class.name)_recv_nowait (void *input);

//  Send the $(class.name) to the output, and destroy it
int
    $(class.name)_send ($(class.name)_t **self_p, void *output);

//  Send the $(class.name) to the output, and do not destroy it
int
    $(class.name)_send_again ($(class.name)_t *self, void *output);

.for message
//  Send the $(message.NAME) to the output in one step
int
    $(class.name)_send_$(name) (void *output\
.for field where !defined (value)
.   if defined (message.has_msg)
.       echo "E: 'msg' field must be last in the message"
.   endif
,
.   if type = "number"
        $(ctype) $(name)\
.   elsif type = "octets"
        byte *$(name)\
.   elsif type = "string" | type = "longstr"
        const char *$(name)\
.   elsif type = "strings"
        zlist_t *$(name)\
.   elsif type = "dictionary"
        zhash_t *$(name)\
.   elsif type = "chunk"
        zchunk_t *$(name)\
.   elsif type = "frame"
.       message.has_frame = 1
        zframe_t *$(name)\
.   elsif type = "msg"
        zmsg_t *$(name)\
.       message.has_msg = name
.   endif
.endfor
);
    
.endfor
//  Duplicate the $(class.name) message
$(class.name)_t *
    $(class.name)_dup ($(class.name)_t *self);

//  Print contents of message to stdout
void
    $(class.name)_dump ($(class.name)_t *self);

//  Get/set the message routing id
zframe_t *
    $(class.name)_routing_id ($(class.name)_t *self);
void
    $(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id);

//  Get the $(class.name) id and printable command
int
    $(class.name)_id ($(class.name)_t *self);
void
    $(class.name)_set_id ($(class.name)_t *self, int id);
const char *
    $(class.name)_command ($(class.name)_t *self);

.for class.field where !defined (value)
.   if type = "number"
//  Get/set the $(name) field
$(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name));
.#
.   elsif type = "octets"
//  Get/set the $(name) field
byte *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name));
.#
.   elsif type = "string" | type = "longstr"
//  Get/set the $(name) field
const char *
    $(class.name)_$(name) ($(class.name)_t *self);
void
    $(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...);
.#
.   elsif type = "strings"
//  Get/set the $(name) field
zlist_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
zlist_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
void
    $(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p);

//  Iterate through the $(name) field, and append a $(name) value
const char *
    $(class.name)_$(name)_first ($(class.name)_t *self);
const char *
    $(class.name)_$(name)_next ($(class.name)_t *self);
void
    $(class.name)_$(name)_append ($(class.name)_t *self, const char *format, ...);
size_t
    $(class.name)_$(name)_size ($(class.name)_t *self);
.#
.   elsif type = "dictionary"
//  Get/set the $(name) field
zhash_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
zhash_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
void
    $(class.name)_set_$(name) ($(class.name)_t *self, zhash_t **$(name)_p);
    
//  Get/set a value in the $(name) dictionary
const char *
    $(class.name)_$(name)_string ($(class.name)_t *self,
        const char *key, const char *default_value);
uint64_t
    $(class.name)_$(name)_number ($(class.name)_t *self,
        const char *key, uint64_t default_value);
void
    $(class.name)_$(name)_insert ($(class.name)_t *self,
        const char *key, const char *format, ...);
size_t
    $(class.name)_$(name)_size ($(class.name)_t *self);
.#
.   elsif type = "chunk" | type = "frame" | type = "msg"
//  Get a copy of the $(name) field
z$(type)_t *
    $(class.name)_$(name) ($(class.name)_t *self);
//  Get the $(name) field and transfer ownership to caller
z$(type)_t *
    $(class.name)_get_$(name) ($(class.name)_t *self);
//  Set the $(name) field, transferring ownership from caller
void
    $(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.output "$(class.source)/$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec class for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************
    
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.title:)
@discuss
@end
*/

#include <czmq.h>
#include "$(class.header)/$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    zframe_t *routing_id;       //  Routing_id from ROUTER, if any
    int id;                     //  $(class.name) message ID
    byte *needle;               //  Read/write pointer for serialization
    byte *ceiling;              //  Valid upper limit for read pointer
.for class.field
.   if repeat = "yes"
    zlist_t *$(name);           //  $(field.?'':)
.   elsif type = "number"
    $(ctype) $(name);           //  $(field.?'':)
.   elsif type = "octets"
    byte $(name) [$(size)];     //  $(field.?'':)
.   elsif type = "string" | type = "longstr"
    char *$(name);              //  $(field.?'':)
.   elsif type = "strings"
    zlist_t *$(name);           //  $(field.?'':)
.   elsif type = "dictionary"
    zhash_t *$(name);           //  $(field.?'':)
    size_t $(name)_bytes;       //  Size of dictionary content
.   elsif type = "chunk" | type = "frame" | type = "msg"
    z$(type)_t *$(name);        //  $(field.?'':)
.   endif
.endfor
};

//  --------------------------------------------------------------------------
//  Network data encoding macros

//  Put a block of octets to the frame
#define PUT_OCTETS(host,size) { \\
    memcpy (self->needle, (host), size); \\
    self->needle += size; \\
}

//  Get a block of octets from the frame
#define GET_OCTETS(host,size) { \\
    if (self->needle + size > self->ceiling) \\
        goto malformed; \\
    memcpy ((host), self->needle, size); \\
    self->needle += size; \\
}

//  Put a 1-byte number to the frame
#define PUT_NUMBER1(host) { \\
    *(byte *) self->needle = (host); \\
    self->needle++; \\
}

//  Put a 2-byte number to the frame
#define PUT_NUMBER2(host) { \\
    self->needle [0] = (byte) (((host) >> 8)  & 255); \\
    self->needle [1] = (byte) (((host))       & 255); \\
    self->needle += 2; \\
}

//  Put a 4-byte number to the frame
#define PUT_NUMBER4(host) { \\
    self->needle [0] = (byte) (((host) >> 24) & 255); \\
    self->needle [1] = (byte) (((host) >> 16) & 255); \\
    self->needle [2] = (byte) (((host) >> 8)  & 255); \\
    self->needle [3] = (byte) (((host))       & 255); \\
    self->needle += 4; \\
}

//  Put a 8-byte number to the frame
#define PUT_NUMBER8(host) { \\
    self->needle [0] = (byte) (((host) >> 56) & 255); \\
    self->needle [1] = (byte) (((host) >> 48) & 255); \\
    self->needle [2] = (byte) (((host) >> 40) & 255); \\
    self->needle [3] = (byte) (((host) >> 32) & 255); \\
    self->needle [4] = (byte) (((host) >> 24) & 255); \\
    self->needle [5] = (byte) (((host) >> 16) & 255); \\
    self->needle [6] = (byte) (((host) >> 8)  & 255); \\
    self->needle [7] = (byte) (((host))       & 255); \\
    self->needle += 8; \\
}

//  Get a 1-byte number from the frame
#define GET_NUMBER1(host) { \\
    if (self->needle + 1 > self->ceiling) \\
        goto malformed; \\
    (host) = *(byte *) self->needle; \\
    self->needle++; \\
}

//  Get a 2-byte number from the frame
#define GET_NUMBER2(host) { \\
    if (self->needle + 2 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint16_t) (self->needle [0]) << 8) \\
           +  (uint16_t) (self->needle [1]); \\
    self->needle += 2; \\
}

//  Get a 4-byte number from the frame
#define GET_NUMBER4(host) { \\
    if (self->needle + 4 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint32_t) (self->needle [0]) << 24) \\
           + ((uint32_t) (self->needle [1]) << 16) \\
           + ((uint32_t) (self->needle [2]) << 8) \\
           +  (uint32_t) (self->needle [3]); \\
    self->needle += 4; \\
}

//  Get a 8-byte number from the frame
#define GET_NUMBER8(host) { \\
    if (self->needle + 8 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint64_t) (self->needle [0]) << 56) \\
           + ((uint64_t) (self->needle [1]) << 48) \\
           + ((uint64_t) (self->needle [2]) << 40) \\
           + ((uint64_t) (self->needle [3]) << 32) \\
           + ((uint64_t) (self->needle [4]) << 24) \\
           + ((uint64_t) (self->needle [5]) << 16) \\
           + ((uint64_t) (self->needle [6]) << 8) \\
           +  (uint64_t) (self->needle [7]); \\
    self->needle += 8; \\
}

//  Put a string to the frame
#define PUT_STRING(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER1 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a string from the frame
#define GET_STRING(host) { \\
    size_t string_size; \\
    GET_NUMBER1 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  Put a long string to the frame
#define PUT_LONGSTR(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER4 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a long string from the frame
#define GET_LONGSTR(host) { \\
    size_t string_size; \\
    GET_NUMBER4 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}


//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new (int id)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->id = id;
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
        zframe_destroy (&self->routing_id);
.for class.field
.   if type = "string" | type = "longstr"
        free (self->$(name));
.   elsif type = "strings"
        if (self->$(name))
            zlist_destroy (&self->$(name));
.   elsif type = "dictionary"
        zhash_destroy (&self->$(name));
.   elsif type = "chunk" | type = "frame" | type = "msg"
        z$(type)_destroy (&self->$(name));
.   endif
.endfor

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Parse a $(class.name) from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL. If the socket type is
//  ZMQ_ROUTER, then parses the first frame as a routing_id. Destroys msg
//  and nullifies the msg refernce.

$(class.name)_t *
$(class.name)_decode (zmsg_t **msg_p, int socket_type)
{
    assert (msg_p);
    zmsg_t *msg = *msg_p;
    size_t list_size;
    if (msg == NULL)
        return NULL;
        
    $(class.name)_t *self = $(class.name)_new (0);
    //  If message came from a router socket, first frame is routing_id
    if (socket_type == ZMQ_ROUTER) {
        self->routing_id = zmsg_pop (msg);
        //  If message was not valid, forget about it
        if (!self->routing_id || !zmsg_next (msg)) {
            $(class.name)_destroy (&self);
            return (NULL);      //  Malformed or empty
        }
    }
    //  Read and parse command in frame
    zframe_t *frame = zmsg_pop (msg);
    if (!frame) 
        goto empty;             //  Malformed or empty

    //  Get and check protocol signature
    self->needle = zframe_data (frame);
    self->ceiling = self->needle + zframe_size (frame);
    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature)))
        goto empty;             //  Invalid signature

    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if repeat = "yes"
            {
                GET_NUMBER4 (list_size);
                self->$(name) = zlist_new ();
                while (list_size--) {
.               if type = "number"
                    $(ctype) *number = malloc (sizeof ($(ctype)));
                    GET_NUMBER$(size) (*number);
                    zlist_append (self->$(name), number);
.               elsif type = "string"
                    zlist_autofree (self->$(name));
                    char *string;
                    GET_STRING (string);
                    zlist_append (self->$(name), string);
                    free (string);
.               elsif type = "longstr"
                    zlist_autofree (self->$(name));
                    char *string;
                    GET_LONGSTR (self->$(name));
                    zlist_append (self->$(name), string);
                    free (string);
.               elsif type = "chunk"
                    size_t chunk_size;
                    GET_NUMBER4 (chunk_size);
                    if (self->needle + chunk_size > (self->ceiling))
                        goto malformed;
                    zchunk_t *chunk = zchunk_new (self->needle, chunk_size);
                    zlist_append (self->$(name), chunk);
                    self->needle += chunk_size;
.               endif              
                }
            } 
.       elsif type = "number"
            GET_NUMBER$(size) (self->$(name));
.           if defined (field.value)
            if (self->$(name) != $(field.value:))
                goto malformed;
.           endif
.       elsif type = "octets"
            GET_OCTETS (self->$(name), $(size));
.       elsif type = "string"
            GET_STRING (self->$(name));
.           if defined (field.value)
            if (strneq (self->$(name), "$(field.value:)"))
                goto malformed;
.           endif
.       elsif type = "longstr"
            GET_LONGSTR (self->$(name));
.       elsif type = "dictionary"
            {
                size_t hash_size;
                GET_NUMBER4 (hash_size);
                self->$(name) = zhash_new ();
                zhash_autofree (self->$(name));
                while (hash_size--) {
                    char *key, *value;
                    GET_STRING (key);
                    GET_LONGSTR (value);
                    zhash_insert (self->$(name), key, value);
                    free (key);
                    free (value);
                }
            }
.       elsif type = "chunk"
            {
                size_t chunk_size;
                GET_NUMBER4 (chunk_size);
                if (self->needle + chunk_size > (self->ceiling))
                    goto malformed;
                self->$(name) = zchunk_new (self->needle, chunk_size);
                self->needle += chunk_size;
            }
.       elsif type = "frame"
            //  Get next frame, leave current untouched
            zframe_t *$(name) = zmsg_pop (msg);
            if (!$(name))
                goto malformed;
            self->$(name) = $(name);
.       elsif type = "msg"
            //  Get zero or more remaining frames,
            //  leave current frame untouched
            self->$(name) = zmsg_new ();
            zframe_t *$(name)_part = zmsg_pop (msg);
            while ($(name)_part) {
                zmsg_add (self->$(name), $(name)_part);
                $(name)_part = zmsg_pop (msg);
            }
.       endif
.   endfor
            break;

.endfor
        default:
            goto malformed;
    }
    //  Successful return
    zframe_destroy (&frame);
    zmsg_destroy (msg_p);
    return self;

    //  Error returns
    malformed:
        printf ("E: malformed message '%d'\\n", self->id);
    empty:
        zframe_destroy (&frame);
        zmsg_destroy (msg_p);
        $(class.name)_destroy (&self);
        return (NULL);
}


//  --------------------------------------------------------------------------
//  Receive and parse a $(class.name) from the socket. Returns new object or
//  NULL if error. Will block if there's no message waiting.

$(class.name)_t *
$(class.name)_recv (void *input)
{
    assert (input);
    zmsg_t *msg = zmsg_recv (input);
    return $(class.name)_decode (&msg, zsocket_type (input));
}


//  --------------------------------------------------------------------------
//  Receive and parse a $(class.name) from the socket. Returns new object, 
//  or NULL either if there was no input waiting, or the recv was interrupted.

$(class.name)_t *
$(class.name)_recv_nowait (void *input)
{
    assert (input);
    zmsg_t *msg = zmsg_recv_nowait (input);
    return $(class.name)_decode (&msg, zsocket_type (input));
}
.for class.field where type = "dictionary"


//  Count size of key/value pair for serialization
//  Key is encoded as string, value as longstr
static int
s_$(name)_count (const char *key, void *item, void *argument)
{
    $(class.name)_t *self = ($(class.name)_t *) argument;
    self->$(name)_bytes += 1 + strlen (key) + 4 + strlen ((char *) item);
    return 0;
}

//  Serialize $(name) key=value pair
static int
s_$(name)_write (const char *key, void *item, void *argument)
{
    $(class.name)_t *self = ($(class.name)_t *) argument;
    PUT_STRING (key);
    PUT_LONGSTR ((char *) item);
    return 0;
}
.endfor


//  Encode $(class.name) into zmsg and destroy it. Returns a newly created
//  object or NULL if error. Use when not in control of sending the message.
//  If the socket_type is ZMQ_ROUTER, then stores the routing_id as the
//  first frame of the resulting message.

zmsg_t *
$(class.name)_encode ($(class.name)_t *self, int socket_type)
{
    assert (self);
    zmsg_t *msg = zmsg_new ();

    //  If we're sending to a ROUTER, send the routing_id first
    if (socket_type == ZMQ_ROUTER)
        zmsg_prepend (msg, &self->routing_id);
        
    size_t frame_size = 2 + 1;          //  Signature and message ID
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            //  $(name) is a $(size)-byte integer
            frame_size += $(size);
.       elsif type = "octets"
            //  $(name) is a block of $(size) bytes
            frame_size += $(size);
.       elsif type = "string"
            //  $(name) is a string with 1-byte length
.           if defined (field.value)
            frame_size += 1 + strlen ("$(field.value:)");
.           else
            frame_size++;       //  Size is one octet
            if (self->$(name))
                frame_size += strlen (self->$(name));
.           endif
.       elsif type = "longstr"
            //  $(name) is a string with 4-byte length
            frame_size += 4;
            if (self->$(name))
                frame_size += strlen (self->$(name));
.       elsif type = "strings"
            //  $(name) is an array of strings
            frame_size += 4;    //  Size is 4 octets
            if (self->$(name)) {
                //  Add up size of list contents
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    frame_size += 4 + strlen ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
.       elsif type = "dictionary"
            //  $(name) is an array of key=value strings
            frame_size += 4;    //  Size is 4 octets
            if (self->$(name)) {
                self->$(name)_bytes = 0;
                //  Add up size of dictionary contents
                zhash_foreach (self->$(name), s_$(name)_count, self);
            }
            frame_size += self->$(name)_bytes;
.       elsif type = "chunk"
            //  $(name) is a chunk with 4-byte length
            frame_size += 4;
            if (self->$(name))
                frame_size += zchunk_size (self->$(name));
.       endif
.   endfor
            break;
            
.endfor
        default:
            printf ("E: bad message type '%d', not sent\\n", self->id);
            //  No recovery, this is a fatal application error
            assert (false);
    }
    //  Now serialize message into the frame
    zframe_t *frame = zframe_new (NULL, frame_size);
    self->needle = zframe_data (frame);
    PUT_NUMBER2 (0xAAA0 | $(class.signature));
    PUT_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(field.value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(field.value:)");
.           else
            if (self->$(name)) {
                PUT_STRING (self->$(name));
            }
            else
                PUT_NUMBER1 (0);    //  Empty string
.           endif
.       elsif type = "longstr"
            if (self->$(name)) {
                PUT_LONGSTR (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty string
.       elsif type = "strings"
            if (self->$(name)) {
                PUT_NUMBER4 (zlist_size (self->$(name)));
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    PUT_LONGSTR ($(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            else
                PUT_NUMBER4 (0);    //  Empty string array
.       elsif type = "dictionary"
            if (self->$(name)) {
                PUT_NUMBER4 (zhash_size (self->$(name)));
                zhash_foreach (self->$(name), s_$(name)_write, self);
            }
            else
                PUT_NUMBER4 (0);    //  Empty dictionary
.       elsif type = "chunk"
            if (self->$(name)) {
                PUT_NUMBER4 (zchunk_size (self->$(name)));
                memcpy (self->needle,
                        zchunk_data (self->$(name)),
                        zchunk_size (self->$(name)));
                self->needle += zchunk_size (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty chunk
.       endif
.   endfor
            break;

.endfor
    }
    //  Now send the data frame
    if (zmsg_append (msg, &frame)) {
        zmsg_destroy (&msg);
        $(class.name)_destroy (&self);
        return NULL;
    }
.for class.message where count (field, type = "frame")
    //  Now send any frame fields, in order
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
.   for field where type = "frame"
        //  If $(name) isn't set, send an empty frame
        if (!self->$(field.name))
            self->$(field.name) = zframe_new (NULL, 0);
        if (zmsg_append (msg, &self->$(field.name))) {
            zmsg_destroy (&msg);
            $(class.name)_destroy (&self);
            return NULL;
        }
.   endfor
    }
.endfor
.for class.message where count (field, type = "msg")
.   for field where type = "msg"
    //  Now send the $(field.name) field if set
    if (self->id == $(CLASS.NAME)_$(MESSAGE.NAME)) {
        zframe_t *$(field.name)_part = zmsg_pop (self->$(field.name));
        while ($(field.name)_part) {
            zmsg_append (msg, &$(field.name)_part);
            $(field.name)_part = zmsg_pop (self->$(field.name));
        }
    }
.   endfor
.endfor
    //  Destroy $(class.name) object
    $(class.name)_destroy (&self);
    return msg;

}

//  --------------------------------------------------------------------------
//  Send the $(class.name) to the socket, and destroy it
//  Returns 0 if OK, else -1

int
$(class.name)_send ($(class.name)_t **self_p, void *output)
{
    assert (self_p);
    assert (*self_p);
    assert (output);

    $(class.name)_t *self = *self_p;
    zmsg_t *msg = $(class.name)_encode (self, zsocket_type (output));
    if (msg && zmsg_send (&msg, output) == 0)
        return 0;
    else
        return -1;              //  Failed to encode, or send
}


//  --------------------------------------------------------------------------
//  Send the $(class.name) to the output, and do not destroy it

int
$(class.name)_send_again ($(class.name)_t *self, void *output)
{
    assert (self);
    assert (output);
    self = $(class.name)_dup (self);
    return $(class.name)_send (&self, output);
}


.for message
//  --------------------------------------------------------------------------
//  Send the $(message.NAME) to the socket in one step

int
$(class.name)_send_$(name) (
    void *output\
.for field where !defined (value)
,
.   if type = "number"
    $(ctype) $(name)\
.   elsif type = "octets"
    byte *$(name)\
.   elsif type = "string" | type = "longstr"
    const char *$(name)\
.   elsif type = "strings"
    zlist_t *$(name)\
.   elsif type = "dictionary"
    zhash_t *$(name)\
.   elsif type = "chunk" | type = "frame" | type = "msg"
    z$(type)_t *$(name)\
.   endif
.endfor
)
{
    $(class.name)_t *self = $(class.name)_new ($(class.NAME)_$(NAME));
.for field where !defined (value)
.   if type = "number" | type = "octets" | type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, $(name));
.   elsif type = "strings"
    zlist_t *$(name)_copy = zlist_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   elsif type = "dictionary"
    zhash_t *$(name)_copy = zhash_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   elsif type = "chunk" | type = "frame" | type = "msg"
    z$(type)_t *$(name)_copy = z$(type)_dup ($(name));
    $(class.name)_set_$(name) (self, &$(name)_copy);
.   endif
.endfor
    return $(class.name)_send (&self, output);
}


.endfor
//  --------------------------------------------------------------------------
//  Duplicate the $(class.name) message

$(class.name)_t *
$(class.name)_dup ($(class.name)_t *self)
{
    if (!self)
        return NULL;
        
    $(class.name)_t *copy = $(class.name)_new (self->id);
    if (self->routing_id)
        copy->routing_id = zframe_dup (self->routing_id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            copy->$(name) = self->$(name);
.       elsif type = "octets"
            memcpy (copy->$(name), self->$(name), $(size));
.       elsif type = "string" | type = "longstr"
            copy->$(name) = self->$(name)? strdup (self->$(name)): NULL;
.       elsif type = "strings"
            copy->$(name) = self->$(name)? zlist_dup (self->$(name)): NULL;
.       elsif type = "dictionary"
            copy->$(name) = self->$(name)? zhash_dup (self->$(name)): NULL;
.       elsif type = "chunk" | type = "frame" | type = "msg"
            copy->$(name) = self->$(name)? z$(type)_dup (self->$(name)): NULL;
.       endif
.   endfor
            break;

.endfor
    }
    return copy;
}


.for class.field where type = "dictionary"
//  Dump $(name) key=value pair to stdout
static int
s_$(name)_dump (const char *key, void *item, void *argument)
{
    printf ("        %s=%s\\n", key, (char *) item);
    return 0;
}

.endfor

//  --------------------------------------------------------------------------
//  Print contents of message to stdout

void
$(class.name)_dump ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            puts ("$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            printf ("    $(name)=%ld\\n", (long) self->$(name));
.           endif
.       elsif type = "octets"
            printf ("    $(name)=");
            int $(name)_index;
            for ($(name)_index = 0; $(name)_index < $(size); $(name)_index++) {
                if ($(name)_index && ($(name)_index % 4 == 0))
                    printf ("-");
                printf ("%02X", self->$(name) [$(name)_index]);
            }
            printf ("\\n");
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            if (self->$(name))
                printf ("    $(name)='%s'\\n", self->$(name));
            else
                printf ("    $(name)=\\n");
.           endif
.       elsif type = "strings"
            printf ("    $(name)={");
            if (self->$(name)) {
                char *$(name) = (char *) zlist_first (self->$(name));
                while ($(name)) {
                    printf (" '%s'", $(name));
                    $(name) = (char *) zlist_next (self->$(name));
                }
            }
            printf (" }\\n");
.       elsif type = "dictionary"
            printf ("    $(name)={\\n");
            if (self->$(name))
                zhash_foreach (self->$(name), s_$(name)_dump, self);
            else
                printf ("(NULL)\\n");
            printf ("    }\\n");
.       elsif type = "chunk"
            printf ("    $(name)={\\n");
            if (self->$(name))
                zchunk_print (self->$(name));
            else
                printf ("(NULL)\\n");
            printf ("    }\\n");
.       elsif type = "frame"
            printf ("    $(name)={\\n");
            if (self->$(name))
                zframe_print (self->$(name), NULL);
            else
                printf ("(NULL)\\n");
            printf ("    }\\n");
.       elsif type = "msg"
            printf ("    $(name)={\\n");
            if (self->$(name))
                zmsg_dump (self->$(name));
            else
                printf ("(NULL)\\n");
            printf ("    }\\n");
.       endif
.   endfor
            break;
            
.endfor
    }
}


//  --------------------------------------------------------------------------
//  Get/set the message routing_id

zframe_t *
$(class.name)_routing_id ($(class.name)_t *self)
{
    assert (self);
    return self->routing_id;
}

void
$(class.name)_set_routing_id ($(class.name)_t *self, zframe_t *routing_id)
{
    if (self->routing_id)
        zframe_destroy (&self->routing_id);
    self->routing_id = zframe_dup (routing_id);
}


//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_set_id ($(class.name)_t *self, int id)
{
    self->id = id;
}

//  --------------------------------------------------------------------------
//  Return a printable command string

const char *
$(class.name)_command ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            return ("$(MESSAGE.NAME)");
            break;
.endfor
    }
    return "?";
}

.for class.field where !defined (value)
.   if type = "number"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "octets"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name))
{
    assert (self);
    memcpy (self->$(name), $(name), $(size));
}

.   elsif type = "string" | type = "longstr"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...)
{
    //  Format $(name) from provided arguments
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    free (self->$(name));
    self->$(name) = zsys_vprintf (format, argptr);
    va_end (argptr);
}

.   elsif type = "strings"
//  --------------------------------------------------------------------------
//  Get the $(name) field, without transferring ownership

zlist_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zlist_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    assert (self);
    zlist_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zlist_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zlist_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}

//  --------------------------------------------------------------------------
//  Iterate through the $(name) field, and append a $(name) value

const char *
$(class.name)_$(name)_first ($(class.name)_t *self)
{
    assert (self);
    if (self->$(name))
        return (char *) (zlist_first (self->$(name)));
    else
        return NULL;
}

const char *
$(class.name)_$(name)_next ($(class.name)_t *self)
{
    assert (self);
    if (self->$(name))
        return (char *) (zlist_next (self->$(name)));
    else
        return NULL;
}

void
$(class.name)_$(name)_append ($(class.name)_t *self, const char *format, ...)
{
    //  Format into newly allocated string
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    char *string = zsys_vprintf (format, argptr);
    va_end (argptr);

    //  Attach string to list
    if (!self->$(name)) {
        self->$(name) = zlist_new ();
        zlist_autofree (self->$(name));
    }
    zlist_append (self->$(name), string);
    free (string);
}

size_t
$(class.name)_$(name)_size ($(class.name)_t *self)
{
    return zlist_size (self->$(name));
}

.   elsif type = "dictionary"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

zhash_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

zhash_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    zhash_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, zhash_t **$(name)_p)
{
    assert (self);
    assert ($(name)_p);
    zhash_destroy (&self->$(name));
    self->$(name) = *$(name)_p;
    *$(name)_p = NULL;
}

//  --------------------------------------------------------------------------
//  Get/set a value in the $(name) dictionary

const char *
$(class.name)_$(name)_string ($(class.name)_t *self, const char *key, const char *default_value)
{
    assert (self);
    const char *value = NULL;
    if (self->$(name))
        value = (const char *) (zhash_lookup (self->$(name), key));
    if (!value)
        value = default_value;

    return value;
}

uint64_t
$(class.name)_$(name)_number ($(class.name)_t *self, const char *key, uint64_t default_value)
{
    assert (self);
    uint64_t value = default_value;
    char *string = NULL;
    if (self->$(name))
        string = (char *) (zhash_lookup (self->$(name), key));
    if (string)
        value = atol (string);

    return value;
}

void
$(class.name)_$(name)_insert ($(class.name)_t *self, const char *key, const char *format, ...)
{
    //  Format into newly allocated string
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    char *string = zsys_vprintf (format, argptr);
    va_end (argptr);

    //  Store string in hash table
    if (!self->$(name)) {
        self->$(name) = zhash_new ();
        zhash_autofree (self->$(name));
    }
    zhash_update (self->$(name), key, string);
    free (string);
}

size_t
$(class.name)_$(name)_size ($(class.name)_t *self)
{
    return zhash_size (self->$(name));
}

.   elsif type = "chunk" | type = "frame" | type = "msg"
//  --------------------------------------------------------------------------
//  Get the $(name) field without transferring ownership

z$(type)_t *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

//  Get the $(name) field and transfer ownership to caller

z$(type)_t *
$(class.name)_get_$(name) ($(class.name)_t *self)
{
    z$(type)_t *$(name) = self->$(name);
    self->$(name) = NULL;
    return $(name);
}

//  Set the $(name) field, transferring ownership from caller

void
$(class.name)_set_$(name) ($(class.name)_t *self, z$(type)_t **$(type)_p)
{
    assert (self);
    assert ($(type)_p);
    z$(type)_destroy (&self->$(name));
    self->$(name) = *$(type)_p;
    *$(type)_p = NULL;
}
.   endif

.endfor

//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  @selftest
    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new (0);
    assert (self);
    $(class.name)_destroy (&self);

    //  Create pair of sockets we can send through
    zctx_t *ctx = zctx_new ();
    assert (ctx);

    void *output = zsocket_new (ctx, ZMQ_DEALER);
    assert (output);
    zsocket_bind (output, "inproc://selftest");

    void *input = zsocket_new (ctx, ZMQ_ROUTER);
    assert (input);
    zsocket_connect (input, "inproc://selftest");
    
    //  Encode/send/decode and verify each message type
    int instance;
    $(class.name)_t *copy;
.for class.message
    self = $(class.name)_new ($(CLASS.NAME)_$(MESSAGE.NAME));
    
    //  Check that _dup works on empty message
    copy = $(class.name)_dup (self);
    assert (copy);
    $(class.name)_destroy (&copy);

.   for field where !defined (value)
.       if type = "number"
    $(class.name)_set_$(name) (self, 123);
.       elsif type = "octets"
    byte $(name)_data [$(CLASS.NAME)_$(FIELD.NAME)_SIZE];
    memset ($(name)_data, 123, $(CLASS.NAME)_$(FIELD.NAME)_SIZE);
    $(class.name)_set_$(name) (self, $(name)_data);
.       elsif type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, "Life is short but Now lasts for ever");
.       elsif type = "strings"
    $(class.name)_$(name)_append (self, "Name: %s", "Brutus");
    $(class.name)_$(name)_append (self, "Age: %d", 43);
.       elsif type = "dictionary"
    $(class.name)_$(name)_insert (self, "Name", "Brutus");
    $(class.name)_$(name)_insert (self, "Age", "%d", 43);
.       elsif type = "chunk" | type = "frame"
    z$(type)_t *$(message.name)_$(name) = z$(type)_new ("Captcha Diem", 12);
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
.       elsif type = "msg"
    zmsg_t *$(message.name)_$(name) = zmsg_new ();
    $(class.name)_set_$(name) (self, &$(message.name)_$(name));
    zmsg_addstr ($(class.name)_$(name) (self), "Hello, World");
.       endif
.   endfor
    //  Send twice from same object
    $(class.name)_send_again (self, output);
    $(class.name)_send (&self, output);

    for (instance = 0; instance < 2; instance++) {
        self = $(class.name)_recv (input);
        assert (self);
        assert ($(class.name)_routing_id (self));
        
.   for field where !defined (value)
.       if type = "number"
        assert ($(class.name)_$(name) (self) == 123);
.       elsif type = "octets"
        assert ($(class.name)_$(name) (self) [0] == 123);
        assert ($(class.name)_$(name) (self) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE - 1] == 123);
.       elsif type = "string" | type = "longstr"
        assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.       elsif type = "strings"
        assert ($(class.name)_$(name)_size (self) == 2);
        assert (streq ($(class.name)_$(name)_first (self), "Name: Brutus"));
        assert (streq ($(class.name)_$(name)_next (self), "Age: 43"));
.       elsif type = "dictionary"
        assert ($(class.name)_$(name)_size (self) == 2);
        assert (streq ($(class.name)_$(name)_string (self, "Name", "?"), "Brutus"));
        assert ($(class.name)_$(name)_number (self, "Age", 0) == 43);
.       elsif type = "chunk"
        assert (memcmp (zchunk_data ($(class.name)_$(name) (self)), "Captcha Diem", 12) == 0);
.       elsif type = "frame"
        assert (zframe_streq ($(class.name)_$(name) (self), "Captcha Diem"));
.       elsif type = "msg"
        assert (zmsg_size ($(class.name)_$(name) (self)) == 1);
.       endif
.   endfor
        $(class.name)_destroy (&self);
    }
.endfor

    zctx_destroy (&ctx);
    //  @end

    printf ("OK\\n");
    return 0;
}
